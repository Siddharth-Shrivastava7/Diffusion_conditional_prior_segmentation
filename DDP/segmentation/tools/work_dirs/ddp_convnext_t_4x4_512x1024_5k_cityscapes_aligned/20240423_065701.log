2024-04-23 06:57:01,190 - mmseg - INFO - Multi-processing start method is `None`
2024-04-23 06:57:01,192 - mmseg - INFO - OpenCV num_threads is `96
2024-04-23 06:57:01,192 - mmseg - INFO - OMP num threads is 1
2024-04-23 06:57:01,237 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.9.12 (main, Jun  1 2022, 11:38:51) [GCC 7.5.0]
CUDA available: True
GPU 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15: Tesla V100-SXM3-32GB
CUDA_HOME: /home/apps/cuda-12.0
NVCC: Cuda compilation tools, release 12.0, V12.0.76
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.12.0+cu116
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.0+cu116
OpenCV: 4.9.0
MMCV: 1.6.2
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.6
MMSegmentation: 0.29.0+abe7009
------------------------------------------------------------

2024-04-23 06:57:01,238 - mmseg - INFO - Distributed training: True
2024-04-23 06:57:02,230 - mmseg - INFO - Config:
dataset_type = 'CityscapesDataset'
data_root = '/raid/ai24resch01002/datasets/cityscapes'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (512, 1024)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=4,
    train=dict(
        type='CityscapesDataset',
        data_root='/raid/ai24resch01002/datasets/cityscapes',
        img_dir='leftImg8bit/train',
        ann_dir='gtFine/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(512, 1024), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(512, 1024), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='CityscapesDataset',
        data_root='/raid/ai24resch01002/datasets/cityscapes',
        img_dir='leftImg8bit/val',
        ann_dir='gtFine/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CityscapesDataset',
        data_root='/raid/ai24resch01002/datasets/cityscapes',
        img_dir='leftImg8bit/val',
        ann_dir='gtFine/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'https://huggingface.co/yfji/DDP-Weight/resolve/main/ddp_convnext_t_4x4_512x1024_160k_cityscapes.pth'
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(
    type='AdamW',
    lr=6e-06,
    betas=(0.9, 0.999),
    weight_decay=0.01,
    paramwise_cfg=dict(
        custom_keys=dict(
            pos_block=dict(decay_mult=0.0),
            norm=dict(decay_mult=0.0),
            head=dict(lr_mult=1.0))))
optimizer_config = dict()
lr_config = dict(
    policy='poly',
    warmup='linear',
    warmup_iters=1500,
    warmup_ratio=1e-06,
    power=1.0,
    min_lr=0.0,
    by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=5000)
checkpoint_config = dict(by_epoch=False, interval=500)
evaluation = dict(interval=500, metric='mIoU', pre_eval=True, save_best='mIoU')
custom_imports = dict(imports='mmcls.models', allow_failed_imports=False)
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='SelfAlignedDDP',
    timesteps=10,
    bit_scale=0.01,
    pretrained=None,
    backbone=dict(
        type='mmcls.ConvNeXt',
        arch='tiny',
        out_indices=[0, 1, 2, 3],
        drop_path_rate=0.4,
        layer_scale_init_value=1.0,
        gap_before_final_norm=False,
        init_cfg=None),
    neck=[
        dict(
            type='FPN',
            in_channels=[96, 192, 384, 768],
            out_channels=256,
            act_cfg=None,
            norm_cfg=dict(type='GN', num_groups=32),
            num_outs=4),
        dict(
            type='MultiStageMerging',
            in_channels=[256, 256, 256, 256],
            out_channels=256,
            kernel_size=1,
            norm_cfg=dict(type='GN', num_groups=32),
            act_cfg=None)
    ],
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=256,
        in_index=0,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=19,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    decode_head=dict(
        type='DeformableHeadWithTime',
        in_channels=[256],
        channels=256,
        in_index=[0],
        dropout_ratio=0.0,
        num_classes=19,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        num_feature_levels=1,
        encoder=dict(
            type='DetrTransformerEncoder',
            num_layers=6,
            transformerlayers=dict(
                type='BaseTransformerLayer',
                use_time_mlp=True,
                attn_cfgs=dict(
                    type='MultiScaleDeformableAttention',
                    embed_dims=256,
                    num_levels=1,
                    num_heads=8,
                    dropout=0.0),
                ffn_cfgs=dict(
                    type='FFN',
                    embed_dims=256,
                    feedforward_channels=1024,
                    ffn_drop=0.0,
                    act_cfg=dict(type='GELU')),
                operation_order=('self_attn', 'norm', 'ffn', 'norm'))),
        positional_encoding=dict(
            type='SinePositionalEncoding',
            num_feats=128,
            normalize=True,
            offset=-0.5),
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
find_unused_parameters = True
work_dir = './work_dirs/ddp_convnext_t_4x4_512x1024_5k_cityscapes_aligned'
gpu_ids = range(0, 8)
auto_resume = False

2024-04-23 06:57:07,012 - mmseg - INFO - Set random seed to 622448007, deterministic: True
2024-04-23 06:57:07,492 - mmseg - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2024-04-23 06:57:07,512 - mmseg - INFO - initialize MultiStageMerging with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2024-04-23 06:57:07,577 - mmseg - INFO - initialize FCNHead with init_cfg {'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
Name of parameter - Initialization information

backbone.downsample_layers.0.0.weight - torch.Size([96, 3, 4, 4]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.downsample_layers.0.0.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.downsample_layers.0.1.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.downsample_layers.0.1.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.downsample_layers.1.0.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.downsample_layers.1.0.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.downsample_layers.1.1.weight - torch.Size([192, 96, 2, 2]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.downsample_layers.1.1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.downsample_layers.2.0.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.downsample_layers.2.0.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.downsample_layers.2.1.weight - torch.Size([384, 192, 2, 2]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.downsample_layers.2.1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.downsample_layers.3.0.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.downsample_layers.3.0.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.downsample_layers.3.1.weight - torch.Size([768, 384, 2, 2]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.downsample_layers.3.1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.0.gamma - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.0.depthwise_conv.weight - torch.Size([96, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.0.depthwise_conv.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.0.norm.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.0.norm.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.0.pointwise_conv1.weight - torch.Size([384, 96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.0.pointwise_conv1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.0.pointwise_conv2.weight - torch.Size([96, 384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.0.pointwise_conv2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.1.gamma - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.1.depthwise_conv.weight - torch.Size([96, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.1.depthwise_conv.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.1.norm.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.1.norm.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.1.pointwise_conv1.weight - torch.Size([384, 96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.1.pointwise_conv1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.1.pointwise_conv2.weight - torch.Size([96, 384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.1.pointwise_conv2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.2.gamma - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.2.depthwise_conv.weight - torch.Size([96, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.2.depthwise_conv.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.2.norm.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.2.norm.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.2.pointwise_conv1.weight - torch.Size([384, 96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.2.pointwise_conv1.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.2.pointwise_conv2.weight - torch.Size([96, 384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.0.2.pointwise_conv2.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.0.gamma - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.0.depthwise_conv.weight - torch.Size([192, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.0.depthwise_conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.0.norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.0.norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.0.pointwise_conv1.weight - torch.Size([768, 192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.0.pointwise_conv1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.0.pointwise_conv2.weight - torch.Size([192, 768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.0.pointwise_conv2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.1.gamma - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.1.depthwise_conv.weight - torch.Size([192, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.1.depthwise_conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.1.norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.1.norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.1.pointwise_conv1.weight - torch.Size([768, 192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.1.pointwise_conv1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.1.pointwise_conv2.weight - torch.Size([192, 768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.1.pointwise_conv2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.2.gamma - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.2.depthwise_conv.weight - torch.Size([192, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.2.depthwise_conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.2.norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.2.norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.2.pointwise_conv1.weight - torch.Size([768, 192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.2.pointwise_conv1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.2.pointwise_conv2.weight - torch.Size([192, 768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.1.2.pointwise_conv2.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.0.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.0.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.0.depthwise_conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.0.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.0.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.0.pointwise_conv1.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.0.pointwise_conv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.0.pointwise_conv2.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.0.pointwise_conv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.1.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.1.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.1.depthwise_conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.1.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.1.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.1.pointwise_conv1.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.1.pointwise_conv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.1.pointwise_conv2.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.1.pointwise_conv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.2.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.2.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.2.depthwise_conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.2.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.2.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.2.pointwise_conv1.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.2.pointwise_conv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.2.pointwise_conv2.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.2.pointwise_conv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.3.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.3.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.3.depthwise_conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.3.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.3.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.3.pointwise_conv1.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.3.pointwise_conv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.3.pointwise_conv2.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.3.pointwise_conv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.4.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.4.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.4.depthwise_conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.4.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.4.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.4.pointwise_conv1.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.4.pointwise_conv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.4.pointwise_conv2.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.4.pointwise_conv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.5.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.5.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.5.depthwise_conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.5.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.5.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.5.pointwise_conv1.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.5.pointwise_conv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.5.pointwise_conv2.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.5.pointwise_conv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.6.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.6.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.6.depthwise_conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.6.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.6.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.6.pointwise_conv1.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.6.pointwise_conv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.6.pointwise_conv2.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.6.pointwise_conv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.7.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.7.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.7.depthwise_conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.7.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.7.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.7.pointwise_conv1.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.7.pointwise_conv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.7.pointwise_conv2.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.7.pointwise_conv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.8.gamma - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.8.depthwise_conv.weight - torch.Size([384, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.8.depthwise_conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.8.norm.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.8.norm.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.8.pointwise_conv1.weight - torch.Size([1536, 384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.8.pointwise_conv1.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.8.pointwise_conv2.weight - torch.Size([384, 1536]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.2.8.pointwise_conv2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.0.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.0.depthwise_conv.weight - torch.Size([768, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.0.depthwise_conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.0.norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.0.norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.0.pointwise_conv1.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.0.pointwise_conv1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.0.pointwise_conv2.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.0.pointwise_conv2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.1.depthwise_conv.weight - torch.Size([768, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.1.depthwise_conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.1.norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.1.norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.1.pointwise_conv1.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.1.pointwise_conv1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.1.pointwise_conv2.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.1.pointwise_conv2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.2.depthwise_conv.weight - torch.Size([768, 1, 7, 7]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.2.depthwise_conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.2.norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.2.norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.2.pointwise_conv1.weight - torch.Size([3072, 768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.2.pointwise_conv1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.2.pointwise_conv2.weight - torch.Size([768, 3072]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.stages.3.2.pointwise_conv2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.norm0.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.norm0.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.norm1.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.norm1.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.norm2.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.norm2.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.norm3.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

backbone.norm3.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.0.lateral_convs.0.conv.weight - torch.Size([256, 96, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.0.lateral_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.0.lateral_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.0.lateral_convs.1.conv.weight - torch.Size([256, 192, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.0.lateral_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.0.lateral_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.0.lateral_convs.2.conv.weight - torch.Size([256, 384, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.0.lateral_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.0.lateral_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.0.lateral_convs.3.conv.weight - torch.Size([256, 768, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.0.lateral_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.0.lateral_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.0.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.0.fpn_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.0.fpn_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.0.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.0.fpn_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.0.fpn_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.0.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.0.fpn_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.0.fpn_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.0.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.0.fpn_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.0.fpn_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.1.down.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

neck.1.down.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

neck.1.down.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.conv_seg.weight - torch.Size([19, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.conv_seg.bias - torch.Size([19]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.0.attentions.0.sampling_offsets.weight - torch.Size([64, 256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.0.attentions.0.sampling_offsets.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.0.attentions.0.attention_weights.weight - torch.Size([32, 256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.0.attentions.0.attention_weights.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.0.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.0.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.0.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.0.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.0.time_mlp.1.weight - torch.Size([512, 1024]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.0.time_mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.1.attentions.0.sampling_offsets.weight - torch.Size([64, 256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.1.attentions.0.sampling_offsets.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.1.attentions.0.attention_weights.weight - torch.Size([32, 256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.1.attentions.0.attention_weights.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.1.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.1.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.1.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.1.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.1.time_mlp.1.weight - torch.Size([512, 1024]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.1.time_mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.1.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.1.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.1.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.1.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.2.attentions.0.sampling_offsets.weight - torch.Size([64, 256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.2.attentions.0.sampling_offsets.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.2.attentions.0.attention_weights.weight - torch.Size([32, 256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.2.attentions.0.attention_weights.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.2.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.2.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.2.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.2.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.2.time_mlp.1.weight - torch.Size([512, 1024]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.2.time_mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.2.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.2.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.2.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.2.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.3.attentions.0.sampling_offsets.weight - torch.Size([64, 256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.3.attentions.0.sampling_offsets.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.3.attentions.0.attention_weights.weight - torch.Size([32, 256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.3.attentions.0.attention_weights.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.3.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.3.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.3.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.3.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.3.time_mlp.1.weight - torch.Size([512, 1024]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.3.time_mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.3.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.3.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.3.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.3.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.4.attentions.0.sampling_offsets.weight - torch.Size([64, 256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.4.attentions.0.sampling_offsets.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.4.attentions.0.attention_weights.weight - torch.Size([32, 256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.4.attentions.0.attention_weights.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.4.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.4.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.4.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.4.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.4.time_mlp.1.weight - torch.Size([512, 1024]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.4.time_mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.4.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.4.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.4.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.4.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.5.attentions.0.sampling_offsets.weight - torch.Size([64, 256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.5.attentions.0.sampling_offsets.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.5.attentions.0.attention_weights.weight - torch.Size([32, 256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.5.attentions.0.attention_weights.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.5.attentions.0.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.5.attentions.0.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.5.attentions.0.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.5.attentions.0.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.5.time_mlp.1.weight - torch.Size([512, 1024]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.5.time_mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.5.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.5.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.5.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in DeformableHeadWithTime  

decode_head.encoder.layers.5.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

decode_head.encoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

auxiliary_head.conv_seg.weight - torch.Size([19, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([19]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

embedding_table.weight - torch.Size([20, 256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

transform.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

transform.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

time_mlp.0.weights - torch.Size([8]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

time_mlp.1.weight - torch.Size([1024, 17]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

time_mlp.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

time_mlp.3.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  

time_mlp.3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of SelfAlignedDDP  
2024-04-23 06:57:07,591 - mmseg - INFO - SelfAlignedDDP(
  (backbone): ConvNeXt(
    (downsample_layers): ModuleList(
      (0): Sequential(
        (0): Conv2d(3, 96, kernel_size=(4, 4), stride=(4, 4))
        (1): LayerNorm2d((96,), eps=1e-06, elementwise_affine=True)
      )
      (1): Sequential(
        (0): LayerNorm2d((96,), eps=1e-05, elementwise_affine=True)
        (1): Conv2d(96, 192, kernel_size=(2, 2), stride=(2, 2))
      )
      (2): Sequential(
        (0): LayerNorm2d((192,), eps=1e-05, elementwise_affine=True)
        (1): Conv2d(192, 384, kernel_size=(2, 2), stride=(2, 2))
      )
      (3): Sequential(
        (0): LayerNorm2d((384,), eps=1e-05, elementwise_affine=True)
        (1): Conv2d(384, 768, kernel_size=(2, 2), stride=(2, 2))
      )
    )
    (stages): ModuleList(
      (0): Sequential(
        (0): ConvNeXtBlock(
          (depthwise_conv): Conv2d(96, 96, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=96)
          (norm): LayerNorm2d((96,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=96, out_features=384, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=384, out_features=96, bias=True)
          (drop_path): Identity()
        )
        (1): ConvNeXtBlock(
          (depthwise_conv): Conv2d(96, 96, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=96)
          (norm): LayerNorm2d((96,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=96, out_features=384, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=384, out_features=96, bias=True)
          (drop_path): DropPath()
        )
        (2): ConvNeXtBlock(
          (depthwise_conv): Conv2d(96, 96, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=96)
          (norm): LayerNorm2d((96,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=96, out_features=384, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=384, out_features=96, bias=True)
          (drop_path): DropPath()
        )
      )
      (1): Sequential(
        (0): ConvNeXtBlock(
          (depthwise_conv): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
          (norm): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=192, out_features=768, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=768, out_features=192, bias=True)
          (drop_path): DropPath()
        )
        (1): ConvNeXtBlock(
          (depthwise_conv): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
          (norm): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=192, out_features=768, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=768, out_features=192, bias=True)
          (drop_path): DropPath()
        )
        (2): ConvNeXtBlock(
          (depthwise_conv): Conv2d(192, 192, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=192)
          (norm): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=192, out_features=768, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=768, out_features=192, bias=True)
          (drop_path): DropPath()
        )
      )
      (2): Sequential(
        (0): ConvNeXtBlock(
          (depthwise_conv): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
          (norm): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=384, out_features=1536, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=1536, out_features=384, bias=True)
          (drop_path): DropPath()
        )
        (1): ConvNeXtBlock(
          (depthwise_conv): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
          (norm): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=384, out_features=1536, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=1536, out_features=384, bias=True)
          (drop_path): DropPath()
        )
        (2): ConvNeXtBlock(
          (depthwise_conv): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
          (norm): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=384, out_features=1536, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=1536, out_features=384, bias=True)
          (drop_path): DropPath()
        )
        (3): ConvNeXtBlock(
          (depthwise_conv): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
          (norm): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=384, out_features=1536, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=1536, out_features=384, bias=True)
          (drop_path): DropPath()
        )
        (4): ConvNeXtBlock(
          (depthwise_conv): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
          (norm): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=384, out_features=1536, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=1536, out_features=384, bias=True)
          (drop_path): DropPath()
        )
        (5): ConvNeXtBlock(
          (depthwise_conv): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
          (norm): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=384, out_features=1536, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=1536, out_features=384, bias=True)
          (drop_path): DropPath()
        )
        (6): ConvNeXtBlock(
          (depthwise_conv): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
          (norm): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=384, out_features=1536, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=1536, out_features=384, bias=True)
          (drop_path): DropPath()
        )
        (7): ConvNeXtBlock(
          (depthwise_conv): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
          (norm): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=384, out_features=1536, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=1536, out_features=384, bias=True)
          (drop_path): DropPath()
        )
        (8): ConvNeXtBlock(
          (depthwise_conv): Conv2d(384, 384, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=384)
          (norm): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=384, out_features=1536, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=1536, out_features=384, bias=True)
          (drop_path): DropPath()
        )
      )
      (3): Sequential(
        (0): ConvNeXtBlock(
          (depthwise_conv): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
          (norm): LayerNorm2d((768,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=768, out_features=3072, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=3072, out_features=768, bias=True)
          (drop_path): DropPath()
        )
        (1): ConvNeXtBlock(
          (depthwise_conv): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
          (norm): LayerNorm2d((768,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=768, out_features=3072, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=3072, out_features=768, bias=True)
          (drop_path): DropPath()
        )
        (2): ConvNeXtBlock(
          (depthwise_conv): Conv2d(768, 768, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), groups=768)
          (norm): LayerNorm2d((768,), eps=1e-06, elementwise_affine=True)
          (pointwise_conv1): Linear(in_features=768, out_features=3072, bias=True)
          (act): GELU(approximate=none)
          (pointwise_conv2): Linear(in_features=3072, out_features=768, bias=True)
          (drop_path): DropPath()
        )
      )
    )
    (norm0): LayerNorm2d((96,), eps=1e-06, elementwise_affine=True)
    (norm1): LayerNorm2d((192,), eps=1e-06, elementwise_affine=True)
    (norm2): LayerNorm2d((384,), eps=1e-06, elementwise_affine=True)
    (norm3): LayerNorm2d((768,), eps=1e-06, elementwise_affine=True)
  )
  (neck): Sequential(
    (0): FPN(
      (lateral_convs): ModuleList(
        (0): ConvModule(
          (conv): Conv2d(96, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): ConvModule(
          (conv): Conv2d(192, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): ConvModule(
          (conv): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (3): ConvModule(
          (conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (fpn_convs): ModuleList(
        (0): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (1): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (2): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
        (3): ConvModule(
          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
    )
    init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
    (1): MultiStageMerging(
      (down): ConvModule(
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (gn): GroupNorm(32, 256, eps=1e-05, affine=True)
      )
    )
    init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  )
  (decode_head): DeformableHeadWithTime(
    input_transform=multiple_select, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(256, 19, kernel_size=(1, 1), stride=(1, 1))
    (encoder): DetrTransformerEncoder(
      (layers): ModuleList(
        (0): BaseTransformerLayer(
          (attentions): ModuleList(
            (0): MultiScaleDeformableAttention(
              (dropout): Dropout(p=0.0, inplace=False)
              (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
              (attention_weights): Linear(in_features=256, out_features=32, bias=True)
              (value_proj): Linear(in_features=256, out_features=256, bias=True)
              (output_proj): Linear(in_features=256, out_features=256, bias=True)
            )
          )
          (time_mlp): Sequential(
            (0): SiLU()
            (1): Linear(in_features=1024, out_features=512, bias=True)
          )
          (ffns): ModuleList(
            (0): FFN(
              (activate): GELU(approximate=none)
              (layers): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=256, out_features=1024, bias=True)
                  (1): GELU(approximate=none)
                  (2): Dropout(p=0.0, inplace=False)
                )
                (1): Linear(in_features=1024, out_features=256, bias=True)
                (2): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): Identity()
            )
          )
          (norms): ModuleList(
            (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
        )
        (1): BaseTransformerLayer(
          (attentions): ModuleList(
            (0): MultiScaleDeformableAttention(
              (dropout): Dropout(p=0.0, inplace=False)
              (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
              (attention_weights): Linear(in_features=256, out_features=32, bias=True)
              (value_proj): Linear(in_features=256, out_features=256, bias=True)
              (output_proj): Linear(in_features=256, out_features=256, bias=True)
            )
          )
          (time_mlp): Sequential(
            (0): SiLU()
            (1): Linear(in_features=1024, out_features=512, bias=True)
          )
          (ffns): ModuleList(
            (0): FFN(
              (activate): GELU(approximate=none)
              (layers): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=256, out_features=1024, bias=True)
                  (1): GELU(approximate=none)
                  (2): Dropout(p=0.0, inplace=False)
                )
                (1): Linear(in_features=1024, out_features=256, bias=True)
                (2): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): Identity()
            )
          )
          (norms): ModuleList(
            (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
        )
        (2): BaseTransformerLayer(
          (attentions): ModuleList(
            (0): MultiScaleDeformableAttention(
              (dropout): Dropout(p=0.0, inplace=False)
              (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
              (attention_weights): Linear(in_features=256, out_features=32, bias=True)
              (value_proj): Linear(in_features=256, out_features=256, bias=True)
              (output_proj): Linear(in_features=256, out_features=256, bias=True)
            )
          )
          (time_mlp): Sequential(
            (0): SiLU()
            (1): Linear(in_features=1024, out_features=512, bias=True)
          )
          (ffns): ModuleList(
            (0): FFN(
              (activate): GELU(approximate=none)
              (layers): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=256, out_features=1024, bias=True)
                  (1): GELU(approximate=none)
                  (2): Dropout(p=0.0, inplace=False)
                )
                (1): Linear(in_features=1024, out_features=256, bias=True)
                (2): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): Identity()
            )
          )
          (norms): ModuleList(
            (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
        )
        (3): BaseTransformerLayer(
          (attentions): ModuleList(
            (0): MultiScaleDeformableAttention(
              (dropout): Dropout(p=0.0, inplace=False)
              (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
              (attention_weights): Linear(in_features=256, out_features=32, bias=True)
              (value_proj): Linear(in_features=256, out_features=256, bias=True)
              (output_proj): Linear(in_features=256, out_features=256, bias=True)
            )
          )
          (time_mlp): Sequential(
            (0): SiLU()
            (1): Linear(in_features=1024, out_features=512, bias=True)
          )
          (ffns): ModuleList(
            (0): FFN(
              (activate): GELU(approximate=none)
              (layers): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=256, out_features=1024, bias=True)
                  (1): GELU(approximate=none)
                  (2): Dropout(p=0.0, inplace=False)
                )
                (1): Linear(in_features=1024, out_features=256, bias=True)
                (2): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): Identity()
            )
          )
          (norms): ModuleList(
            (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
        )
        (4): BaseTransformerLayer(
          (attentions): ModuleList(
            (0): MultiScaleDeformableAttention(
              (dropout): Dropout(p=0.0, inplace=False)
              (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
              (attention_weights): Linear(in_features=256, out_features=32, bias=True)
              (value_proj): Linear(in_features=256, out_features=256, bias=True)
              (output_proj): Linear(in_features=256, out_features=256, bias=True)
            )
          )
          (time_mlp): Sequential(
            (0): SiLU()
            (1): Linear(in_features=1024, out_features=512, bias=True)
          )
          (ffns): ModuleList(
            (0): FFN(
              (activate): GELU(approximate=none)
              (layers): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=256, out_features=1024, bias=True)
                  (1): GELU(approximate=none)
                  (2): Dropout(p=0.0, inplace=False)
                )
                (1): Linear(in_features=1024, out_features=256, bias=True)
                (2): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): Identity()
            )
          )
          (norms): ModuleList(
            (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
        )
        (5): BaseTransformerLayer(
          (attentions): ModuleList(
            (0): MultiScaleDeformableAttention(
              (dropout): Dropout(p=0.0, inplace=False)
              (sampling_offsets): Linear(in_features=256, out_features=64, bias=True)
              (attention_weights): Linear(in_features=256, out_features=32, bias=True)
              (value_proj): Linear(in_features=256, out_features=256, bias=True)
              (output_proj): Linear(in_features=256, out_features=256, bias=True)
            )
          )
          (time_mlp): Sequential(
            (0): SiLU()
            (1): Linear(in_features=1024, out_features=512, bias=True)
          )
          (ffns): ModuleList(
            (0): FFN(
              (activate): GELU(approximate=none)
              (layers): Sequential(
                (0): Sequential(
                  (0): Linear(in_features=256, out_features=1024, bias=True)
                  (1): GELU(approximate=none)
                  (2): Dropout(p=0.0, inplace=False)
                )
                (1): Linear(in_features=1024, out_features=256, bias=True)
                (2): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): Identity()
            )
          )
          (norms): ModuleList(
            (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (positional_encoding): SinePositionalEncoding(num_feats=128, temperature=10000, normalize=True, scale=6.283185307179586, eps=1e-06)
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
  (auxiliary_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(256, 19, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
  (embedding_table): Embedding(20, 256)
  (transform): ConvModule(
    (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
  )
  (time_mlp): Sequential(
    (0): LearnedSinusoidalPosEmb()
    (1): Linear(in_features=17, out_features=1024, bias=True)
    (2): GELU(approximate=none)
    (3): Linear(in_features=1024, out_features=1024, bias=True)
  )
)
2024-04-23 06:57:07,599 - mmseg - INFO - Model size:136.06
2024-04-23 06:57:07,718 - mmseg - INFO - Loaded 2975 images
2024-04-23 06:57:09,610 - mmseg - INFO - Loaded 500 images
2024-04-23 06:57:09,613 - mmseg - INFO - load checkpoint from http path: https://huggingface.co/yfji/DDP-Weight/resolve/main/ddp_convnext_t_4x4_512x1024_160k_cityscapes.pth
2024-04-23 06:57:09,822 - mmseg - INFO - Start running, host: ai24resch01002@ai-dgx201, work_dir: /raid/ai24resch01002/Diffusion_conditional_prior_segmentation/DDP/segmentation/tools/work_dirs/ddp_convnext_t_4x4_512x1024_5k_cityscapes_aligned
2024-04-23 06:57:09,823 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2024-04-23 06:57:09,824 - mmseg - INFO - workflow: [('train', 1)], max: 5000 iters
2024-04-23 06:57:09,825 - mmseg - INFO - Checkpoints will be saved to /raid/ai24resch01002/Diffusion_conditional_prior_segmentation/DDP/segmentation/tools/work_dirs/ddp_convnext_t_4x4_512x1024_5k_cityscapes_aligned by HardDiskBackend.

2023-08-08 17:18:42,570 - mmseg - INFO - Multi-processing start method is `None`
2023-08-08 17:18:42,570 - mmseg - INFO - OpenCV num_threads is `64
2023-08-08 17:18:42,571 - mmseg - INFO - OMP num threads is 1
2023-08-08 17:18:42,650 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]
CUDA available: True
GPU 0,1,2,3: Tesla V100-SXM2-32GB
CUDA_HOME: /home/sidd_s/scratch/miniconda3/envs/py38tor110
NVCC: Cuda compilation tools, release 11.3, V11.3.109
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.10.1
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.2
OpenCV: 4.7.0
MMCV: 1.5.0
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 11.3
MMSegmentation: 0.30.0+6ef3276
------------------------------------------------------------

2023-08-08 17:18:42,650 - mmseg - INFO - Distributed training: True
2023-08-08 17:18:43,325 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
checkpoint = '/home/sidd_s/scratch/saved_models/DDPS/segformer_b2_cityscapes20_singlestep/best_mIoU_iter_64000.pth'
model = dict(
    type='EncoderDecoderDiffusion',
    freeze_parameters=['backbone', 'decode_head'],
    pretrained=
    '/home/sidd_s/scratch/saved_models/DDPS/segformer_b2_cityscapes20_singlestep/best_mIoU_iter_64000.pth',
    backbone=dict(
        type='MixVisionTransformerCustomInitWeights',
        in_channels=3,
        embed_dims=64,
        num_stages=4,
        num_layers=[3, 4, 6, 3],
        num_heads=[1, 2, 5, 8],
        patch_sizes=[7, 3, 3, 3],
        sr_ratios=[8, 4, 2, 1],
        out_indices=(0, 1, 2, 3),
        mlp_ratio=4,
        qkv_bias=True,
        drop_rate=0.0,
        attn_drop_rate=0.0,
        drop_path_rate=0.1),
    decode_head=dict(
        type='SegformerHeadUnetFCHeadMultiStep',
        pretrained=
        '/home/sidd_s/scratch/saved_models/DDPS/segformer_b2_cityscapes20_singlestep/best_mIoU_iter_64000.pth',
        dim=256,
        out_dim=256,
        unet_channels=272,
        dim_mults=[1, 1, 1],
        cat_embedding_dim=16,
        diffusion_timesteps=20,
        collect_timesteps=[
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19
        ],
        in_channels=[64, 128, 320, 512],
        in_index=[0, 1, 2, 3],
        channels=256,
        dropout_ratio=0.1,
        num_classes=20,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        ignore_index=0,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'Cityscapes20Dataset'
data_root = '/home/sidd_s/scratch/dataset/cityscapes'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (1024, 1024)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotationsCityscapes20'),
    dict(type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(1024, 1024), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(1024, 1024), pad_val=0, seg_pad_val=0),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 1024),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=4,
    train=dict(
        type='Cityscapes20Dataset',
        data_root='/home/sidd_s/scratch/dataset/cityscapes',
        img_dir='leftImg8bit/train',
        ann_dir='gtFine/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotationsCityscapes20'),
            dict(
                type='Resize', img_scale=(2048, 1024), ratio_range=(0.5, 2.0)),
            dict(
                type='RandomCrop', crop_size=(1024, 1024), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(1024, 1024), pad_val=0, seg_pad_val=0),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='Cityscapes20Dataset',
        data_root='/home/sidd_s/scratch/dataset/cityscapes',
        img_dir='leftImg8bit/val',
        ann_dir='gtFine/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='Cityscapes20Dataset',
        data_root='/home/sidd_s/scratch/dataset/cityscapes',
        img_dir='leftImg8bit/val',
        ann_dir='gtFine/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 1024),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(
    type='AdamW', lr=0.00015, betas=[0.9, 0.96], weight_decay=0.045)
optimizer_config = dict()
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=1000,
    warmup_ratio=1e-06,
    step=20000,
    gamma=0.5,
    min_lr=1e-06,
    by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=160000)
checkpoint_config = dict(by_epoch=False, interval=16000, max_keep_ckpts=1)
evaluation = dict(
    interval=16000, metric='mIoU', pre_eval=True, save_best='mIoU')
custom_hooks = [
    dict(
        type='ConstantMomentumEMAHook',
        momentum=0.01,
        interval=25,
        eval_interval=16000,
        auto_resume=True,
        priority=49)
]
work_dir = './work_dirs/segformer_b2_cityscapes20_multistep'
gpu_ids = range(0, 4)
auto_resume = False

2023-08-08 17:18:47,264 - mmseg - INFO - Set random seed to 1253414679, deterministic: False
2023-08-08 17:18:47,817 - mmseg - INFO - Parameters in backbone freezed!
2023-08-08 17:18:47,818 - mmseg - INFO - Trainable parameters in SegformerHeadUnetFCHeadMultiStep: ['unet.init_conv.weight', 'unet.init_conv.bias', 'unet.time_mlp.1.weight', 'unet.time_mlp.1.bias', 'unet.time_mlp.3.weight', 'unet.time_mlp.3.bias', 'unet.downs.0.0.mlp.1.weight', 'unet.downs.0.0.mlp.1.bias', 'unet.downs.0.0.block1.proj.weight', 'unet.downs.0.0.block1.proj.bias', 'unet.downs.0.0.block1.norm.weight', 'unet.downs.0.0.block1.norm.bias', 'unet.downs.0.0.block2.proj.weight', 'unet.downs.0.0.block2.proj.bias', 'unet.downs.0.0.block2.norm.weight', 'unet.downs.0.0.block2.norm.bias', 'unet.downs.0.1.mlp.1.weight', 'unet.downs.0.1.mlp.1.bias', 'unet.downs.0.1.block1.proj.weight', 'unet.downs.0.1.block1.proj.bias', 'unet.downs.0.1.block1.norm.weight', 'unet.downs.0.1.block1.norm.bias', 'unet.downs.0.1.block2.proj.weight', 'unet.downs.0.1.block2.proj.bias', 'unet.downs.0.1.block2.norm.weight', 'unet.downs.0.1.block2.norm.bias', 'unet.downs.0.2.fn.fn.to_qkv.weight', 'unet.downs.0.2.fn.fn.to_out.0.weight', 'unet.downs.0.2.fn.fn.to_out.0.bias', 'unet.downs.0.2.fn.fn.to_out.1.g', 'unet.downs.0.2.fn.norm.g', 'unet.downs.0.3.weight', 'unet.downs.0.3.bias', 'unet.downs.1.0.mlp.1.weight', 'unet.downs.1.0.mlp.1.bias', 'unet.downs.1.0.block1.proj.weight', 'unet.downs.1.0.block1.proj.bias', 'unet.downs.1.0.block1.norm.weight', 'unet.downs.1.0.block1.norm.bias', 'unet.downs.1.0.block2.proj.weight', 'unet.downs.1.0.block2.proj.bias', 'unet.downs.1.0.block2.norm.weight', 'unet.downs.1.0.block2.norm.bias', 'unet.downs.1.1.mlp.1.weight', 'unet.downs.1.1.mlp.1.bias', 'unet.downs.1.1.block1.proj.weight', 'unet.downs.1.1.block1.proj.bias', 'unet.downs.1.1.block1.norm.weight', 'unet.downs.1.1.block1.norm.bias', 'unet.downs.1.1.block2.proj.weight', 'unet.downs.1.1.block2.proj.bias', 'unet.downs.1.1.block2.norm.weight', 'unet.downs.1.1.block2.norm.bias', 'unet.downs.1.2.fn.fn.to_qkv.weight', 'unet.downs.1.2.fn.fn.to_out.0.weight', 'unet.downs.1.2.fn.fn.to_out.0.bias', 'unet.downs.1.2.fn.fn.to_out.1.g', 'unet.downs.1.2.fn.norm.g', 'unet.downs.1.3.weight', 'unet.downs.1.3.bias', 'unet.downs.2.0.mlp.1.weight', 'unet.downs.2.0.mlp.1.bias', 'unet.downs.2.0.block1.proj.weight', 'unet.downs.2.0.block1.proj.bias', 'unet.downs.2.0.block1.norm.weight', 'unet.downs.2.0.block1.norm.bias', 'unet.downs.2.0.block2.proj.weight', 'unet.downs.2.0.block2.proj.bias', 'unet.downs.2.0.block2.norm.weight', 'unet.downs.2.0.block2.norm.bias', 'unet.downs.2.1.mlp.1.weight', 'unet.downs.2.1.mlp.1.bias', 'unet.downs.2.1.block1.proj.weight', 'unet.downs.2.1.block1.proj.bias', 'unet.downs.2.1.block1.norm.weight', 'unet.downs.2.1.block1.norm.bias', 'unet.downs.2.1.block2.proj.weight', 'unet.downs.2.1.block2.proj.bias', 'unet.downs.2.1.block2.norm.weight', 'unet.downs.2.1.block2.norm.bias', 'unet.downs.2.2.fn.fn.to_qkv.weight', 'unet.downs.2.2.fn.fn.to_out.0.weight', 'unet.downs.2.2.fn.fn.to_out.0.bias', 'unet.downs.2.2.fn.fn.to_out.1.g', 'unet.downs.2.2.fn.norm.g', 'unet.downs.2.3.weight', 'unet.downs.2.3.bias', 'unet.ups.0.0.mlp.1.weight', 'unet.ups.0.0.mlp.1.bias', 'unet.ups.0.0.block1.proj.weight', 'unet.ups.0.0.block1.proj.bias', 'unet.ups.0.0.block1.norm.weight', 'unet.ups.0.0.block1.norm.bias', 'unet.ups.0.0.block2.proj.weight', 'unet.ups.0.0.block2.proj.bias', 'unet.ups.0.0.block2.norm.weight', 'unet.ups.0.0.block2.norm.bias', 'unet.ups.0.0.res_conv.weight', 'unet.ups.0.0.res_conv.bias', 'unet.ups.0.1.mlp.1.weight', 'unet.ups.0.1.mlp.1.bias', 'unet.ups.0.1.block1.proj.weight', 'unet.ups.0.1.block1.proj.bias', 'unet.ups.0.1.block1.norm.weight', 'unet.ups.0.1.block1.norm.bias', 'unet.ups.0.1.block2.proj.weight', 'unet.ups.0.1.block2.proj.bias', 'unet.ups.0.1.block2.norm.weight', 'unet.ups.0.1.block2.norm.bias', 'unet.ups.0.1.res_conv.weight', 'unet.ups.0.1.res_conv.bias', 'unet.ups.0.2.fn.fn.to_qkv.weight', 'unet.ups.0.2.fn.fn.to_out.0.weight', 'unet.ups.0.2.fn.fn.to_out.0.bias', 'unet.ups.0.2.fn.fn.to_out.1.g', 'unet.ups.0.2.fn.norm.g', 'unet.ups.0.3.1.weight', 'unet.ups.0.3.1.bias', 'unet.ups.1.0.mlp.1.weight', 'unet.ups.1.0.mlp.1.bias', 'unet.ups.1.0.block1.proj.weight', 'unet.ups.1.0.block1.proj.bias', 'unet.ups.1.0.block1.norm.weight', 'unet.ups.1.0.block1.norm.bias', 'unet.ups.1.0.block2.proj.weight', 'unet.ups.1.0.block2.proj.bias', 'unet.ups.1.0.block2.norm.weight', 'unet.ups.1.0.block2.norm.bias', 'unet.ups.1.0.res_conv.weight', 'unet.ups.1.0.res_conv.bias', 'unet.ups.1.1.mlp.1.weight', 'unet.ups.1.1.mlp.1.bias', 'unet.ups.1.1.block1.proj.weight', 'unet.ups.1.1.block1.proj.bias', 'unet.ups.1.1.block1.norm.weight', 'unet.ups.1.1.block1.norm.bias', 'unet.ups.1.1.block2.proj.weight', 'unet.ups.1.1.block2.proj.bias', 'unet.ups.1.1.block2.norm.weight', 'unet.ups.1.1.block2.norm.bias', 'unet.ups.1.1.res_conv.weight', 'unet.ups.1.1.res_conv.bias', 'unet.ups.1.2.fn.fn.to_qkv.weight', 'unet.ups.1.2.fn.fn.to_out.0.weight', 'unet.ups.1.2.fn.fn.to_out.0.bias', 'unet.ups.1.2.fn.fn.to_out.1.g', 'unet.ups.1.2.fn.norm.g', 'unet.ups.1.3.1.weight', 'unet.ups.1.3.1.bias', 'unet.ups.2.0.mlp.1.weight', 'unet.ups.2.0.mlp.1.bias', 'unet.ups.2.0.block1.proj.weight', 'unet.ups.2.0.block1.proj.bias', 'unet.ups.2.0.block1.norm.weight', 'unet.ups.2.0.block1.norm.bias', 'unet.ups.2.0.block2.proj.weight', 'unet.ups.2.0.block2.proj.bias', 'unet.ups.2.0.block2.norm.weight', 'unet.ups.2.0.block2.norm.bias', 'unet.ups.2.0.res_conv.weight', 'unet.ups.2.0.res_conv.bias', 'unet.ups.2.1.mlp.1.weight', 'unet.ups.2.1.mlp.1.bias', 'unet.ups.2.1.block1.proj.weight', 'unet.ups.2.1.block1.proj.bias', 'unet.ups.2.1.block1.norm.weight', 'unet.ups.2.1.block1.norm.bias', 'unet.ups.2.1.block2.proj.weight', 'unet.ups.2.1.block2.proj.bias', 'unet.ups.2.1.block2.norm.weight', 'unet.ups.2.1.block2.norm.bias', 'unet.ups.2.1.res_conv.weight', 'unet.ups.2.1.res_conv.bias', 'unet.ups.2.2.fn.fn.to_qkv.weight', 'unet.ups.2.2.fn.fn.to_out.0.weight', 'unet.ups.2.2.fn.fn.to_out.0.bias', 'unet.ups.2.2.fn.fn.to_out.1.g', 'unet.ups.2.2.fn.norm.g', 'unet.ups.2.3.weight', 'unet.ups.2.3.bias', 'unet.mid_block1.mlp.1.weight', 'unet.mid_block1.mlp.1.bias', 'unet.mid_block1.block1.proj.weight', 'unet.mid_block1.block1.proj.bias', 'unet.mid_block1.block1.norm.weight', 'unet.mid_block1.block1.norm.bias', 'unet.mid_block1.block2.proj.weight', 'unet.mid_block1.block2.proj.bias', 'unet.mid_block1.block2.norm.weight', 'unet.mid_block1.block2.norm.bias', 'unet.mid_attn.fn.fn.to_qkv.weight', 'unet.mid_attn.fn.fn.to_out.weight', 'unet.mid_attn.fn.fn.to_out.bias', 'unet.mid_attn.fn.norm.g', 'unet.mid_block2.mlp.1.weight', 'unet.mid_block2.mlp.1.bias', 'unet.mid_block2.block1.proj.weight', 'unet.mid_block2.block1.proj.bias', 'unet.mid_block2.block1.norm.weight', 'unet.mid_block2.block1.norm.bias', 'unet.mid_block2.block2.proj.weight', 'unet.mid_block2.block2.proj.bias', 'unet.mid_block2.block2.norm.weight', 'unet.mid_block2.block2.norm.bias', 'unet.final_res_block.mlp.1.weight', 'unet.final_res_block.mlp.1.bias', 'unet.final_res_block.block1.proj.weight', 'unet.final_res_block.block1.proj.bias', 'unet.final_res_block.block1.norm.weight', 'unet.final_res_block.block1.norm.bias', 'unet.final_res_block.block2.proj.weight', 'unet.final_res_block.block2.proj.bias', 'unet.final_res_block.block2.norm.weight', 'unet.final_res_block.block2.norm.bias', 'unet.final_res_block.res_conv.weight', 'unet.final_res_block.res_conv.bias', 'unet.final_conv.weight', 'unet.final_conv.bias', 'conv_seg_new.weight', 'conv_seg_new.bias']
2023-08-08 17:18:47,818 - mmseg - INFO - Parameters in decode_head freezed!
2023-08-08 17:18:47,852 - mmseg - INFO - load checkpoint from local path: /home/sidd_s/scratch/saved_models/DDPS/segformer_b2_cityscapes20_singlestep/best_mIoU_iter_64000.pth
2023-08-08 17:18:48,288 - mmseg - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: decode_head.convs.0.conv.weight, decode_head.convs.0.bn.weight, decode_head.convs.0.bn.bias, decode_head.convs.0.bn.running_mean, decode_head.convs.0.bn.running_var, decode_head.convs.0.bn.num_batches_tracked, decode_head.convs.1.conv.weight, decode_head.convs.1.bn.weight, decode_head.convs.1.bn.bias, decode_head.convs.1.bn.running_mean, decode_head.convs.1.bn.running_var, decode_head.convs.1.bn.num_batches_tracked, decode_head.convs.2.conv.weight, decode_head.convs.2.bn.weight, decode_head.convs.2.bn.bias, decode_head.convs.2.bn.running_mean, decode_head.convs.2.bn.running_var, decode_head.convs.2.bn.num_batches_tracked, decode_head.convs.3.conv.weight, decode_head.convs.3.bn.weight, decode_head.convs.3.bn.bias, decode_head.convs.3.bn.running_mean, decode_head.convs.3.bn.running_var, decode_head.convs.3.bn.num_batches_tracked, decode_head.fusion_conv.conv.weight, decode_head.fusion_conv.bn.weight, decode_head.fusion_conv.bn.bias, decode_head.fusion_conv.bn.running_mean, decode_head.fusion_conv.bn.running_var, decode_head.fusion_conv.bn.num_batches_tracked, decode_head.unet.init_conv.weight, decode_head.unet.init_conv.bias, decode_head.unet.time_mlp.1.weight, decode_head.unet.time_mlp.1.bias, decode_head.unet.time_mlp.3.weight, decode_head.unet.time_mlp.3.bias, decode_head.unet.downs.0.0.mlp.1.weight, decode_head.unet.downs.0.0.mlp.1.bias, decode_head.unet.downs.0.0.block1.proj.weight, decode_head.unet.downs.0.0.block1.proj.bias, decode_head.unet.downs.0.0.block1.norm.weight, decode_head.unet.downs.0.0.block1.norm.bias, decode_head.unet.downs.0.0.block2.proj.weight, decode_head.unet.downs.0.0.block2.proj.bias, decode_head.unet.downs.0.0.block2.norm.weight, decode_head.unet.downs.0.0.block2.norm.bias, decode_head.unet.downs.0.1.mlp.1.weight, decode_head.unet.downs.0.1.mlp.1.bias, decode_head.unet.downs.0.1.block1.proj.weight, decode_head.unet.downs.0.1.block1.proj.bias, decode_head.unet.downs.0.1.block1.norm.weight, decode_head.unet.downs.0.1.block1.norm.bias, decode_head.unet.downs.0.1.block2.proj.weight, decode_head.unet.downs.0.1.block2.proj.bias, decode_head.unet.downs.0.1.block2.norm.weight, decode_head.unet.downs.0.1.block2.norm.bias, decode_head.unet.downs.0.2.fn.fn.to_qkv.weight, decode_head.unet.downs.0.2.fn.fn.to_out.0.weight, decode_head.unet.downs.0.2.fn.fn.to_out.0.bias, decode_head.unet.downs.0.2.fn.fn.to_out.1.g, decode_head.unet.downs.0.2.fn.norm.g, decode_head.unet.downs.0.3.weight, decode_head.unet.downs.0.3.bias, decode_head.unet.downs.1.0.mlp.1.weight, decode_head.unet.downs.1.0.mlp.1.bias, decode_head.unet.downs.1.0.block1.proj.weight, decode_head.unet.downs.1.0.block1.proj.bias, decode_head.unet.downs.1.0.block1.norm.weight, decode_head.unet.downs.1.0.block1.norm.bias, decode_head.unet.downs.1.0.block2.proj.weight, decode_head.unet.downs.1.0.block2.proj.bias, decode_head.unet.downs.1.0.block2.norm.weight, decode_head.unet.downs.1.0.block2.norm.bias, decode_head.unet.downs.1.1.mlp.1.weight, decode_head.unet.downs.1.1.mlp.1.bias, decode_head.unet.downs.1.1.block1.proj.weight, decode_head.unet.downs.1.1.block1.proj.bias, decode_head.unet.downs.1.1.block1.norm.weight, decode_head.unet.downs.1.1.block1.norm.bias, decode_head.unet.downs.1.1.block2.proj.weight, decode_head.unet.downs.1.1.block2.proj.bias, decode_head.unet.downs.1.1.block2.norm.weight, decode_head.unet.downs.1.1.block2.norm.bias, decode_head.unet.downs.1.2.fn.fn.to_qkv.weight, decode_head.unet.downs.1.2.fn.fn.to_out.0.weight, decode_head.unet.downs.1.2.fn.fn.to_out.0.bias, decode_head.unet.downs.1.2.fn.fn.to_out.1.g, decode_head.unet.downs.1.2.fn.norm.g, decode_head.unet.downs.1.3.weight, decode_head.unet.downs.1.3.bias, decode_head.unet.downs.2.0.mlp.1.weight, decode_head.unet.downs.2.0.mlp.1.bias, decode_head.unet.downs.2.0.block1.proj.weight, decode_head.unet.downs.2.0.block1.proj.bias, decode_head.unet.downs.2.0.block1.norm.weight, decode_head.unet.downs.2.0.block1.norm.bias, decode_head.unet.downs.2.0.block2.proj.weight, decode_head.unet.downs.2.0.block2.proj.bias, decode_head.unet.downs.2.0.block2.norm.weight, decode_head.unet.downs.2.0.block2.norm.bias, decode_head.unet.downs.2.1.mlp.1.weight, decode_head.unet.downs.2.1.mlp.1.bias, decode_head.unet.downs.2.1.block1.proj.weight, decode_head.unet.downs.2.1.block1.proj.bias, decode_head.unet.downs.2.1.block1.norm.weight, decode_head.unet.downs.2.1.block1.norm.bias, decode_head.unet.downs.2.1.block2.proj.weight, decode_head.unet.downs.2.1.block2.proj.bias, decode_head.unet.downs.2.1.block2.norm.weight, decode_head.unet.downs.2.1.block2.norm.bias, decode_head.unet.downs.2.2.fn.fn.to_qkv.weight, decode_head.unet.downs.2.2.fn.fn.to_out.0.weight, decode_head.unet.downs.2.2.fn.fn.to_out.0.bias, decode_head.unet.downs.2.2.fn.fn.to_out.1.g, decode_head.unet.downs.2.2.fn.norm.g, decode_head.unet.downs.2.3.weight, decode_head.unet.downs.2.3.bias, decode_head.unet.ups.0.0.mlp.1.weight, decode_head.unet.ups.0.0.mlp.1.bias, decode_head.unet.ups.0.0.block1.proj.weight, decode_head.unet.ups.0.0.block1.proj.bias, decode_head.unet.ups.0.0.block1.norm.weight, decode_head.unet.ups.0.0.block1.norm.bias, decode_head.unet.ups.0.0.block2.proj.weight, decode_head.unet.ups.0.0.block2.proj.bias, decode_head.unet.ups.0.0.block2.norm.weight, decode_head.unet.ups.0.0.block2.norm.bias, decode_head.unet.ups.0.0.res_conv.weight, decode_head.unet.ups.0.0.res_conv.bias, decode_head.unet.ups.0.1.mlp.1.weight, decode_head.unet.ups.0.1.mlp.1.bias, decode_head.unet.ups.0.1.block1.proj.weight, decode_head.unet.ups.0.1.block1.proj.bias, decode_head.unet.ups.0.1.block1.norm.weight, decode_head.unet.ups.0.1.block1.norm.bias, decode_head.unet.ups.0.1.block2.proj.weight, decode_head.unet.ups.0.1.block2.proj.bias, decode_head.unet.ups.0.1.block2.norm.weight, decode_head.unet.ups.0.1.block2.norm.bias, decode_head.unet.ups.0.1.res_conv.weight, decode_head.unet.ups.0.1.res_conv.bias, decode_head.unet.ups.0.2.fn.fn.to_qkv.weight, decode_head.unet.ups.0.2.fn.fn.to_out.0.weight, decode_head.unet.ups.0.2.fn.fn.to_out.0.bias, decode_head.unet.ups.0.2.fn.fn.to_out.1.g, decode_head.unet.ups.0.2.fn.norm.g, decode_head.unet.ups.0.3.1.weight, decode_head.unet.ups.0.3.1.bias, decode_head.unet.ups.1.0.mlp.1.weight, decode_head.unet.ups.1.0.mlp.1.bias, decode_head.unet.ups.1.0.block1.proj.weight, decode_head.unet.ups.1.0.block1.proj.bias, decode_head.unet.ups.1.0.block1.norm.weight, decode_head.unet.ups.1.0.block1.norm.bias, decode_head.unet.ups.1.0.block2.proj.weight, decode_head.unet.ups.1.0.block2.proj.bias, decode_head.unet.ups.1.0.block2.norm.weight, decode_head.unet.ups.1.0.block2.norm.bias, decode_head.unet.ups.1.0.res_conv.weight, decode_head.unet.ups.1.0.res_conv.bias, decode_head.unet.ups.1.1.mlp.1.weight, decode_head.unet.ups.1.1.mlp.1.bias, decode_head.unet.ups.1.1.block1.proj.weight, decode_head.unet.ups.1.1.block1.proj.bias, decode_head.unet.ups.1.1.block1.norm.weight, decode_head.unet.ups.1.1.block1.norm.bias, decode_head.unet.ups.1.1.block2.proj.weight, decode_head.unet.ups.1.1.block2.proj.bias, decode_head.unet.ups.1.1.block2.norm.weight, decode_head.unet.ups.1.1.block2.norm.bias, decode_head.unet.ups.1.1.res_conv.weight, decode_head.unet.ups.1.1.res_conv.bias, decode_head.unet.ups.1.2.fn.fn.to_qkv.weight, decode_head.unet.ups.1.2.fn.fn.to_out.0.weight, decode_head.unet.ups.1.2.fn.fn.to_out.0.bias, decode_head.unet.ups.1.2.fn.fn.to_out.1.g, decode_head.unet.ups.1.2.fn.norm.g, decode_head.unet.ups.1.3.1.weight, decode_head.unet.ups.1.3.1.bias, decode_head.unet.ups.2.0.mlp.1.weight, decode_head.unet.ups.2.0.mlp.1.bias, decode_head.unet.ups.2.0.block1.proj.weight, decode_head.unet.ups.2.0.block1.proj.bias, decode_head.unet.ups.2.0.block1.norm.weight, decode_head.unet.ups.2.0.block1.norm.bias, decode_head.unet.ups.2.0.block2.proj.weight, decode_head.unet.ups.2.0.block2.proj.bias, decode_head.unet.ups.2.0.block2.norm.weight, decode_head.unet.ups.2.0.block2.norm.bias, decode_head.unet.ups.2.0.res_conv.weight, decode_head.unet.ups.2.0.res_conv.bias, decode_head.unet.ups.2.1.mlp.1.weight, decode_head.unet.ups.2.1.mlp.1.bias, decode_head.unet.ups.2.1.block1.proj.weight, decode_head.unet.ups.2.1.block1.proj.bias, decode_head.unet.ups.2.1.block1.norm.weight, decode_head.unet.ups.2.1.block1.norm.bias, decode_head.unet.ups.2.1.block2.proj.weight, decode_head.unet.ups.2.1.block2.proj.bias, decode_head.unet.ups.2.1.block2.norm.weight, decode_head.unet.ups.2.1.block2.norm.bias, decode_head.unet.ups.2.1.res_conv.weight, decode_head.unet.ups.2.1.res_conv.bias, decode_head.unet.ups.2.2.fn.fn.to_qkv.weight, decode_head.unet.ups.2.2.fn.fn.to_out.0.weight, decode_head.unet.ups.2.2.fn.fn.to_out.0.bias, decode_head.unet.ups.2.2.fn.fn.to_out.1.g, decode_head.unet.ups.2.2.fn.norm.g, decode_head.unet.ups.2.3.weight, decode_head.unet.ups.2.3.bias, decode_head.unet.mid_block1.mlp.1.weight, decode_head.unet.mid_block1.mlp.1.bias, decode_head.unet.mid_block1.block1.proj.weight, decode_head.unet.mid_block1.block1.proj.bias, decode_head.unet.mid_block1.block1.norm.weight, decode_head.unet.mid_block1.block1.norm.bias, decode_head.unet.mid_block1.block2.proj.weight, decode_head.unet.mid_block1.block2.proj.bias, decode_head.unet.mid_block1.block2.norm.weight, decode_head.unet.mid_block1.block2.norm.bias, decode_head.unet.mid_attn.fn.fn.to_qkv.weight, decode_head.unet.mid_attn.fn.fn.to_out.weight, decode_head.unet.mid_attn.fn.fn.to_out.bias, decode_head.unet.mid_attn.fn.norm.g, decode_head.unet.mid_block2.mlp.1.weight, decode_head.unet.mid_block2.mlp.1.bias, decode_head.unet.mid_block2.block1.proj.weight, decode_head.unet.mid_block2.block1.proj.bias, decode_head.unet.mid_block2.block1.norm.weight, decode_head.unet.mid_block2.block1.norm.bias, decode_head.unet.mid_block2.block2.proj.weight, decode_head.unet.mid_block2.block2.proj.bias, decode_head.unet.mid_block2.block2.norm.weight, decode_head.unet.mid_block2.block2.norm.bias, decode_head.unet.final_res_block.mlp.1.weight, decode_head.unet.final_res_block.mlp.1.bias, decode_head.unet.final_res_block.block1.proj.weight, decode_head.unet.final_res_block.block1.proj.bias, decode_head.unet.final_res_block.block1.norm.weight, decode_head.unet.final_res_block.block1.norm.bias, decode_head.unet.final_res_block.block2.proj.weight, decode_head.unet.final_res_block.block2.proj.bias, decode_head.unet.final_res_block.block2.norm.weight, decode_head.unet.final_res_block.block2.norm.bias, decode_head.unet.final_res_block.res_conv.weight, decode_head.unet.final_res_block.res_conv.bias, decode_head.unet.final_conv.weight, decode_head.unet.final_conv.bias, decode_head.conv_seg_new.weight, decode_head.conv_seg_new.bias, decode_head.embed.weight

2023-08-08 17:18:48,305 - mmseg - INFO - load checkpoint from local path: /home/sidd_s/scratch/saved_models/DDPS/segformer_b2_cityscapes20_singlestep/best_mIoU_iter_64000.pth
2023-08-08 17:18:48,501 - mmseg - WARNING - The model and loaded state dict do not match exactly

size mismatch for unet.init_conv.weight: copying a param with shape torch.Size([128, 272, 7, 7]) from checkpoint, the shape in current model is torch.Size([256, 272, 7, 7]).
size mismatch for unet.init_conv.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.time_mlp.1.weight: copying a param with shape torch.Size([512, 128]) from checkpoint, the shape in current model is torch.Size([1024, 256]).
size mismatch for unet.time_mlp.1.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for unet.time_mlp.3.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1024, 1024]).
size mismatch for unet.time_mlp.3.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1024]).
size mismatch for unet.downs.0.0.mlp.1.weight: copying a param with shape torch.Size([256, 512]) from checkpoint, the shape in current model is torch.Size([512, 1024]).
size mismatch for unet.downs.0.0.mlp.1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for unet.downs.0.0.block1.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.downs.0.0.block1.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.0.0.block1.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.0.0.block1.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.0.0.block2.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.downs.0.0.block2.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.0.0.block2.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.0.0.block2.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.0.1.mlp.1.weight: copying a param with shape torch.Size([256, 512]) from checkpoint, the shape in current model is torch.Size([512, 1024]).
size mismatch for unet.downs.0.1.mlp.1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for unet.downs.0.1.block1.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.downs.0.1.block1.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.0.1.block1.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.0.1.block1.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.0.1.block2.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.downs.0.1.block2.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.0.1.block2.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.0.1.block2.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.0.2.fn.fn.to_qkv.weight: copying a param with shape torch.Size([384, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([384, 256, 1, 1]).
size mismatch for unet.downs.0.2.fn.fn.to_out.0.weight: copying a param with shape torch.Size([128, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 128, 1, 1]).
size mismatch for unet.downs.0.2.fn.fn.to_out.0.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.0.2.fn.fn.to_out.1.g: copying a param with shape torch.Size([1, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for unet.downs.0.2.fn.norm.g: copying a param with shape torch.Size([1, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for unet.downs.0.3.weight: copying a param with shape torch.Size([128, 128, 4, 4]) from checkpoint, the shape in current model is torch.Size([256, 256, 4, 4]).
size mismatch for unet.downs.0.3.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.1.0.mlp.1.weight: copying a param with shape torch.Size([256, 512]) from checkpoint, the shape in current model is torch.Size([512, 1024]).
size mismatch for unet.downs.1.0.mlp.1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for unet.downs.1.0.block1.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.downs.1.0.block1.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.1.0.block1.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.1.0.block1.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.1.0.block2.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.downs.1.0.block2.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.1.0.block2.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.1.0.block2.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.1.1.mlp.1.weight: copying a param with shape torch.Size([256, 512]) from checkpoint, the shape in current model is torch.Size([512, 1024]).
size mismatch for unet.downs.1.1.mlp.1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for unet.downs.1.1.block1.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.downs.1.1.block1.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.1.1.block1.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.1.1.block1.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.1.1.block2.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.downs.1.1.block2.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.1.1.block2.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.1.1.block2.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.1.2.fn.fn.to_qkv.weight: copying a param with shape torch.Size([384, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([384, 256, 1, 1]).
size mismatch for unet.downs.1.2.fn.fn.to_out.0.weight: copying a param with shape torch.Size([128, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 128, 1, 1]).
size mismatch for unet.downs.1.2.fn.fn.to_out.0.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.1.2.fn.fn.to_out.1.g: copying a param with shape torch.Size([1, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for unet.downs.1.2.fn.norm.g: copying a param with shape torch.Size([1, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for unet.downs.1.3.weight: copying a param with shape torch.Size([128, 128, 4, 4]) from checkpoint, the shape in current model is torch.Size([256, 256, 4, 4]).
size mismatch for unet.downs.1.3.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.2.0.mlp.1.weight: copying a param with shape torch.Size([256, 512]) from checkpoint, the shape in current model is torch.Size([512, 1024]).
size mismatch for unet.downs.2.0.mlp.1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for unet.downs.2.0.block1.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.downs.2.0.block1.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.2.0.block1.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.2.0.block1.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.2.0.block2.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.downs.2.0.block2.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.2.0.block2.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.2.0.block2.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.2.1.mlp.1.weight: copying a param with shape torch.Size([256, 512]) from checkpoint, the shape in current model is torch.Size([512, 1024]).
size mismatch for unet.downs.2.1.mlp.1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for unet.downs.2.1.block1.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.downs.2.1.block1.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.2.1.block1.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.2.1.block1.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.2.1.block2.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.downs.2.1.block2.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.2.1.block2.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.2.1.block2.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.2.2.fn.fn.to_qkv.weight: copying a param with shape torch.Size([384, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([384, 256, 1, 1]).
size mismatch for unet.downs.2.2.fn.fn.to_out.0.weight: copying a param with shape torch.Size([128, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 128, 1, 1]).
size mismatch for unet.downs.2.2.fn.fn.to_out.0.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.downs.2.2.fn.fn.to_out.1.g: copying a param with shape torch.Size([1, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for unet.downs.2.2.fn.norm.g: copying a param with shape torch.Size([1, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for unet.downs.2.3.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.downs.2.3.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.0.0.mlp.1.weight: copying a param with shape torch.Size([256, 512]) from checkpoint, the shape in current model is torch.Size([512, 1024]).
size mismatch for unet.ups.0.0.mlp.1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for unet.ups.0.0.block1.proj.weight: copying a param with shape torch.Size([128, 256, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 512, 3, 3]).
size mismatch for unet.ups.0.0.block1.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.0.0.block1.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.0.0.block1.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.0.0.block2.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.ups.0.0.block2.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.0.0.block2.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.0.0.block2.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.0.0.res_conv.weight: copying a param with shape torch.Size([128, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 512, 1, 1]).
size mismatch for unet.ups.0.0.res_conv.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.0.1.mlp.1.weight: copying a param with shape torch.Size([256, 512]) from checkpoint, the shape in current model is torch.Size([512, 1024]).
size mismatch for unet.ups.0.1.mlp.1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for unet.ups.0.1.block1.proj.weight: copying a param with shape torch.Size([128, 256, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 512, 3, 3]).
size mismatch for unet.ups.0.1.block1.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.0.1.block1.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.0.1.block1.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.0.1.block2.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.ups.0.1.block2.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.0.1.block2.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.0.1.block2.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.0.1.res_conv.weight: copying a param with shape torch.Size([128, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 512, 1, 1]).
size mismatch for unet.ups.0.1.res_conv.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.0.2.fn.fn.to_qkv.weight: copying a param with shape torch.Size([384, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([384, 256, 1, 1]).
size mismatch for unet.ups.0.2.fn.fn.to_out.0.weight: copying a param with shape torch.Size([128, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 128, 1, 1]).
size mismatch for unet.ups.0.2.fn.fn.to_out.0.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.0.2.fn.fn.to_out.1.g: copying a param with shape torch.Size([1, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for unet.ups.0.2.fn.norm.g: copying a param with shape torch.Size([1, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for unet.ups.0.3.1.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.ups.0.3.1.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.1.0.mlp.1.weight: copying a param with shape torch.Size([256, 512]) from checkpoint, the shape in current model is torch.Size([512, 1024]).
size mismatch for unet.ups.1.0.mlp.1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for unet.ups.1.0.block1.proj.weight: copying a param with shape torch.Size([128, 256, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 512, 3, 3]).
size mismatch for unet.ups.1.0.block1.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.1.0.block1.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.1.0.block1.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.1.0.block2.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.ups.1.0.block2.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.1.0.block2.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.1.0.block2.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.1.0.res_conv.weight: copying a param with shape torch.Size([128, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 512, 1, 1]).
size mismatch for unet.ups.1.0.res_conv.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.1.1.mlp.1.weight: copying a param with shape torch.Size([256, 512]) from checkpoint, the shape in current model is torch.Size([512, 1024]).
size mismatch for unet.ups.1.1.mlp.1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for unet.ups.1.1.block1.proj.weight: copying a param with shape torch.Size([128, 256, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 512, 3, 3]).
size mismatch for unet.ups.1.1.block1.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.1.1.block1.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.1.1.block1.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.1.1.block2.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.ups.1.1.block2.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.1.1.block2.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.1.1.block2.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.1.1.res_conv.weight: copying a param with shape torch.Size([128, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 512, 1, 1]).
size mismatch for unet.ups.1.1.res_conv.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.1.2.fn.fn.to_qkv.weight: copying a param with shape torch.Size([384, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([384, 256, 1, 1]).
size mismatch for unet.ups.1.2.fn.fn.to_out.0.weight: copying a param with shape torch.Size([128, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 128, 1, 1]).
size mismatch for unet.ups.1.2.fn.fn.to_out.0.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.1.2.fn.fn.to_out.1.g: copying a param with shape torch.Size([1, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for unet.ups.1.2.fn.norm.g: copying a param with shape torch.Size([1, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for unet.ups.1.3.1.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.ups.1.3.1.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.2.0.mlp.1.weight: copying a param with shape torch.Size([256, 512]) from checkpoint, the shape in current model is torch.Size([512, 1024]).
size mismatch for unet.ups.2.0.mlp.1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for unet.ups.2.0.block1.proj.weight: copying a param with shape torch.Size([128, 256, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 512, 3, 3]).
size mismatch for unet.ups.2.0.block1.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.2.0.block1.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.2.0.block1.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.2.0.block2.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.ups.2.0.block2.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.2.0.block2.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.2.0.block2.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.2.0.res_conv.weight: copying a param with shape torch.Size([128, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 512, 1, 1]).
size mismatch for unet.ups.2.0.res_conv.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.2.1.mlp.1.weight: copying a param with shape torch.Size([256, 512]) from checkpoint, the shape in current model is torch.Size([512, 1024]).
size mismatch for unet.ups.2.1.mlp.1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for unet.ups.2.1.block1.proj.weight: copying a param with shape torch.Size([128, 256, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 512, 3, 3]).
size mismatch for unet.ups.2.1.block1.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.2.1.block1.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.2.1.block1.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.2.1.block2.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.ups.2.1.block2.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.2.1.block2.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.2.1.block2.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.2.1.res_conv.weight: copying a param with shape torch.Size([128, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 512, 1, 1]).
size mismatch for unet.ups.2.1.res_conv.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.2.2.fn.fn.to_qkv.weight: copying a param with shape torch.Size([384, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([384, 256, 1, 1]).
size mismatch for unet.ups.2.2.fn.fn.to_out.0.weight: copying a param with shape torch.Size([128, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 128, 1, 1]).
size mismatch for unet.ups.2.2.fn.fn.to_out.0.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.ups.2.2.fn.fn.to_out.1.g: copying a param with shape torch.Size([1, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for unet.ups.2.2.fn.norm.g: copying a param with shape torch.Size([1, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for unet.ups.2.3.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.ups.2.3.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.mid_block1.mlp.1.weight: copying a param with shape torch.Size([256, 512]) from checkpoint, the shape in current model is torch.Size([512, 1024]).
size mismatch for unet.mid_block1.mlp.1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for unet.mid_block1.block1.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.mid_block1.block1.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.mid_block1.block1.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.mid_block1.block1.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.mid_block1.block2.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.mid_block1.block2.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.mid_block1.block2.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.mid_block1.block2.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.mid_attn.fn.fn.to_qkv.weight: copying a param with shape torch.Size([384, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([384, 256, 1, 1]).
size mismatch for unet.mid_attn.fn.fn.to_out.weight: copying a param with shape torch.Size([128, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 128, 1, 1]).
size mismatch for unet.mid_attn.fn.fn.to_out.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.mid_attn.fn.norm.g: copying a param with shape torch.Size([1, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for unet.mid_block2.mlp.1.weight: copying a param with shape torch.Size([256, 512]) from checkpoint, the shape in current model is torch.Size([512, 1024]).
size mismatch for unet.mid_block2.mlp.1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for unet.mid_block2.block1.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.mid_block2.block1.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.mid_block2.block1.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.mid_block2.block1.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.mid_block2.block2.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.mid_block2.block2.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.mid_block2.block2.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.mid_block2.block2.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.final_res_block.mlp.1.weight: copying a param with shape torch.Size([256, 512]) from checkpoint, the shape in current model is torch.Size([512, 1024]).
size mismatch for unet.final_res_block.mlp.1.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([512]).
size mismatch for unet.final_res_block.block1.proj.weight: copying a param with shape torch.Size([128, 256, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 512, 3, 3]).
size mismatch for unet.final_res_block.block1.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.final_res_block.block1.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.final_res_block.block1.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.final_res_block.block2.proj.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
size mismatch for unet.final_res_block.block2.proj.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.final_res_block.block2.norm.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.final_res_block.block2.norm.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.final_res_block.res_conv.weight: copying a param with shape torch.Size([128, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 512, 1, 1]).
size mismatch for unet.final_res_block.res_conv.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
size mismatch for unet.final_conv.weight: copying a param with shape torch.Size([256, 128, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 256, 1, 1]).
unexpected key in source state_dict: backbone.layers.0.0.projection.weight, backbone.layers.0.0.projection.bias, backbone.layers.0.0.norm.weight, backbone.layers.0.0.norm.bias, backbone.layers.0.1.0.norm1.weight, backbone.layers.0.1.0.norm1.bias, backbone.layers.0.1.0.attn.attn.in_proj_weight, backbone.layers.0.1.0.attn.attn.in_proj_bias, backbone.layers.0.1.0.attn.attn.out_proj.weight, backbone.layers.0.1.0.attn.attn.out_proj.bias, backbone.layers.0.1.0.attn.sr.weight, backbone.layers.0.1.0.attn.sr.bias, backbone.layers.0.1.0.attn.norm.weight, backbone.layers.0.1.0.attn.norm.bias, backbone.layers.0.1.0.norm2.weight, backbone.layers.0.1.0.norm2.bias, backbone.layers.0.1.0.ffn.layers.0.weight, backbone.layers.0.1.0.ffn.layers.0.bias, backbone.layers.0.1.0.ffn.layers.1.weight, backbone.layers.0.1.0.ffn.layers.1.bias, backbone.layers.0.1.0.ffn.layers.4.weight, backbone.layers.0.1.0.ffn.layers.4.bias, backbone.layers.0.1.1.norm1.weight, backbone.layers.0.1.1.norm1.bias, backbone.layers.0.1.1.attn.attn.in_proj_weight, backbone.layers.0.1.1.attn.attn.in_proj_bias, backbone.layers.0.1.1.attn.attn.out_proj.weight, backbone.layers.0.1.1.attn.attn.out_proj.bias, backbone.layers.0.1.1.attn.sr.weight, backbone.layers.0.1.1.attn.sr.bias, backbone.layers.0.1.1.attn.norm.weight, backbone.layers.0.1.1.attn.norm.bias, backbone.layers.0.1.1.norm2.weight, backbone.layers.0.1.1.norm2.bias, backbone.layers.0.1.1.ffn.layers.0.weight, backbone.layers.0.1.1.ffn.layers.0.bias, backbone.layers.0.1.1.ffn.layers.1.weight, backbone.layers.0.1.1.ffn.layers.1.bias, backbone.layers.0.1.1.ffn.layers.4.weight, backbone.layers.0.1.1.ffn.layers.4.bias, backbone.layers.0.1.2.norm1.weight, backbone.layers.0.1.2.norm1.bias, backbone.layers.0.1.2.attn.attn.in_proj_weight, backbone.layers.0.1.2.attn.attn.in_proj_bias, backbone.layers.0.1.2.attn.attn.out_proj.weight, backbone.layers.0.1.2.attn.attn.out_proj.bias, backbone.layers.0.1.2.attn.sr.weight, backbone.layers.0.1.2.attn.sr.bias, backbone.layers.0.1.2.attn.norm.weight, backbone.layers.0.1.2.attn.norm.bias, backbone.layers.0.1.2.norm2.weight, backbone.layers.0.1.2.norm2.bias, backbone.layers.0.1.2.ffn.layers.0.weight, backbone.layers.0.1.2.ffn.layers.0.bias, backbone.layers.0.1.2.ffn.layers.1.weight, backbone.layers.0.1.2.ffn.layers.1.bias, backbone.layers.0.1.2.ffn.layers.4.weight, backbone.layers.0.1.2.ffn.layers.4.bias, backbone.layers.0.2.weight, backbone.layers.0.2.bias, backbone.layers.1.0.projection.weight, backbone.layers.1.0.projection.bias, backbone.layers.1.0.norm.weight, backbone.layers.1.0.norm.bias, backbone.layers.1.1.0.norm1.weight, backbone.layers.1.1.0.norm1.bias, backbone.layers.1.1.0.attn.attn.in_proj_weight, backbone.layers.1.1.0.attn.attn.in_proj_bias, backbone.layers.1.1.0.attn.attn.out_proj.weight, backbone.layers.1.1.0.attn.attn.out_proj.bias, backbone.layers.1.1.0.attn.sr.weight, backbone.layers.1.1.0.attn.sr.bias, backbone.layers.1.1.0.attn.norm.weight, backbone.layers.1.1.0.attn.norm.bias, backbone.layers.1.1.0.norm2.weight, backbone.layers.1.1.0.norm2.bias, backbone.layers.1.1.0.ffn.layers.0.weight, backbone.layers.1.1.0.ffn.layers.0.bias, backbone.layers.1.1.0.ffn.layers.1.weight, backbone.layers.1.1.0.ffn.layers.1.bias, backbone.layers.1.1.0.ffn.layers.4.weight, backbone.layers.1.1.0.ffn.layers.4.bias, backbone.layers.1.1.1.norm1.weight, backbone.layers.1.1.1.norm1.bias, backbone.layers.1.1.1.attn.attn.in_proj_weight, backbone.layers.1.1.1.attn.attn.in_proj_bias, backbone.layers.1.1.1.attn.attn.out_proj.weight, backbone.layers.1.1.1.attn.attn.out_proj.bias, backbone.layers.1.1.1.attn.sr.weight, backbone.layers.1.1.1.attn.sr.bias, backbone.layers.1.1.1.attn.norm.weight, backbone.layers.1.1.1.attn.norm.bias, backbone.layers.1.1.1.norm2.weight, backbone.layers.1.1.1.norm2.bias, backbone.layers.1.1.1.ffn.layers.0.weight, backbone.layers.1.1.1.ffn.layers.0.bias, backbone.layers.1.1.1.ffn.layers.1.weight, backbone.layers.1.1.1.ffn.layers.1.bias, backbone.layers.1.1.1.ffn.layers.4.weight, backbone.layers.1.1.1.ffn.layers.4.bias, backbone.layers.1.1.2.norm1.weight, backbone.layers.1.1.2.norm1.bias, backbone.layers.1.1.2.attn.attn.in_proj_weight, backbone.layers.1.1.2.attn.attn.in_proj_bias, backbone.layers.1.1.2.attn.attn.out_proj.weight, backbone.layers.1.1.2.attn.attn.out_proj.bias, backbone.layers.1.1.2.attn.sr.weight, backbone.layers.1.1.2.attn.sr.bias, backbone.layers.1.1.2.attn.norm.weight, backbone.layers.1.1.2.attn.norm.bias, backbone.layers.1.1.2.norm2.weight, backbone.layers.1.1.2.norm2.bias, backbone.layers.1.1.2.ffn.layers.0.weight, backbone.layers.1.1.2.ffn.layers.0.bias, backbone.layers.1.1.2.ffn.layers.1.weight, backbone.layers.1.1.2.ffn.layers.1.bias, backbone.layers.1.1.2.ffn.layers.4.weight, backbone.layers.1.1.2.ffn.layers.4.bias, backbone.layers.1.1.3.norm1.weight, backbone.layers.1.1.3.norm1.bias, backbone.layers.1.1.3.attn.attn.in_proj_weight, backbone.layers.1.1.3.attn.attn.in_proj_bias, backbone.layers.1.1.3.attn.attn.out_proj.weight, backbone.layers.1.1.3.attn.attn.out_proj.bias, backbone.layers.1.1.3.attn.sr.weight, backbone.layers.1.1.3.attn.sr.bias, backbone.layers.1.1.3.attn.norm.weight, backbone.layers.1.1.3.attn.norm.bias, backbone.layers.1.1.3.norm2.weight, backbone.layers.1.1.3.norm2.bias, backbone.layers.1.1.3.ffn.layers.0.weight, backbone.layers.1.1.3.ffn.layers.0.bias, backbone.layers.1.1.3.ffn.layers.1.weight, backbone.layers.1.1.3.ffn.layers.1.bias, backbone.layers.1.1.3.ffn.layers.4.weight, backbone.layers.1.1.3.ffn.layers.4.bias, backbone.layers.1.2.weight, backbone.layers.1.2.bias, backbone.layers.2.0.projection.weight, backbone.layers.2.0.projection.bias, backbone.layers.2.0.norm.weight, backbone.layers.2.0.norm.bias, backbone.layers.2.1.0.norm1.weight, backbone.layers.2.1.0.norm1.bias, backbone.layers.2.1.0.attn.attn.in_proj_weight, backbone.layers.2.1.0.attn.attn.in_proj_bias, backbone.layers.2.1.0.attn.attn.out_proj.weight, backbone.layers.2.1.0.attn.attn.out_proj.bias, backbone.layers.2.1.0.attn.sr.weight, backbone.layers.2.1.0.attn.sr.bias, backbone.layers.2.1.0.attn.norm.weight, backbone.layers.2.1.0.attn.norm.bias, backbone.layers.2.1.0.norm2.weight, backbone.layers.2.1.0.norm2.bias, backbone.layers.2.1.0.ffn.layers.0.weight, backbone.layers.2.1.0.ffn.layers.0.bias, backbone.layers.2.1.0.ffn.layers.1.weight, backbone.layers.2.1.0.ffn.layers.1.bias, backbone.layers.2.1.0.ffn.layers.4.weight, backbone.layers.2.1.0.ffn.layers.4.bias, backbone.layers.2.1.1.norm1.weight, backbone.layers.2.1.1.norm1.bias, backbone.layers.2.1.1.attn.attn.in_proj_weight, backbone.layers.2.1.1.attn.attn.in_proj_bias, backbone.layers.2.1.1.attn.attn.out_proj.weight, backbone.layers.2.1.1.attn.attn.out_proj.bias, backbone.layers.2.1.1.attn.sr.weight, backbone.layers.2.1.1.attn.sr.bias, backbone.layers.2.1.1.attn.norm.weight, backbone.layers.2.1.1.attn.norm.bias, backbone.layers.2.1.1.norm2.weight, backbone.layers.2.1.1.norm2.bias, backbone.layers.2.1.1.ffn.layers.0.weight, backbone.layers.2.1.1.ffn.layers.0.bias, backbone.layers.2.1.1.ffn.layers.1.weight, backbone.layers.2.1.1.ffn.layers.1.bias, backbone.layers.2.1.1.ffn.layers.4.weight, backbone.layers.2.1.1.ffn.layers.4.bias, backbone.layers.2.1.2.norm1.weight, backbone.layers.2.1.2.norm1.bias, backbone.layers.2.1.2.attn.attn.in_proj_weight, backbone.layers.2.1.2.attn.attn.in_proj_bias, backbone.layers.2.1.2.attn.attn.out_proj.weight, backbone.layers.2.1.2.attn.attn.out_proj.bias, backbone.layers.2.1.2.attn.sr.weight, backbone.layers.2.1.2.attn.sr.bias, backbone.layers.2.1.2.attn.norm.weight, backbone.layers.2.1.2.attn.norm.bias, backbone.layers.2.1.2.norm2.weight, backbone.layers.2.1.2.norm2.bias, backbone.layers.2.1.2.ffn.layers.0.weight, backbone.layers.2.1.2.ffn.layers.0.bias, backbone.layers.2.1.2.ffn.layers.1.weight, backbone.layers.2.1.2.ffn.layers.1.bias, backbone.layers.2.1.2.ffn.layers.4.weight, backbone.layers.2.1.2.ffn.layers.4.bias, backbone.layers.2.1.3.norm1.weight, backbone.layers.2.1.3.norm1.bias, backbone.layers.2.1.3.attn.attn.in_proj_weight, backbone.layers.2.1.3.attn.attn.in_proj_bias, backbone.layers.2.1.3.attn.attn.out_proj.weight, backbone.layers.2.1.3.attn.attn.out_proj.bias, backbone.layers.2.1.3.attn.sr.weight, backbone.layers.2.1.3.attn.sr.bias, backbone.layers.2.1.3.attn.norm.weight, backbone.layers.2.1.3.attn.norm.bias, backbone.layers.2.1.3.norm2.weight, backbone.layers.2.1.3.norm2.bias, backbone.layers.2.1.3.ffn.layers.0.weight, backbone.layers.2.1.3.ffn.layers.0.bias, backbone.layers.2.1.3.ffn.layers.1.weight, backbone.layers.2.1.3.ffn.layers.1.bias, backbone.layers.2.1.3.ffn.layers.4.weight, backbone.layers.2.1.3.ffn.layers.4.bias, backbone.layers.2.1.4.norm1.weight, backbone.layers.2.1.4.norm1.bias, backbone.layers.2.1.4.attn.attn.in_proj_weight, backbone.layers.2.1.4.attn.attn.in_proj_bias, backbone.layers.2.1.4.attn.attn.out_proj.weight, backbone.layers.2.1.4.attn.attn.out_proj.bias, backbone.layers.2.1.4.attn.sr.weight, backbone.layers.2.1.4.attn.sr.bias, backbone.layers.2.1.4.attn.norm.weight, backbone.layers.2.1.4.attn.norm.bias, backbone.layers.2.1.4.norm2.weight, backbone.layers.2.1.4.norm2.bias, backbone.layers.2.1.4.ffn.layers.0.weight, backbone.layers.2.1.4.ffn.layers.0.bias, backbone.layers.2.1.4.ffn.layers.1.weight, backbone.layers.2.1.4.ffn.layers.1.bias, backbone.layers.2.1.4.ffn.layers.4.weight, backbone.layers.2.1.4.ffn.layers.4.bias, backbone.layers.2.1.5.norm1.weight, backbone.layers.2.1.5.norm1.bias, backbone.layers.2.1.5.attn.attn.in_proj_weight, backbone.layers.2.1.5.attn.attn.in_proj_bias, backbone.layers.2.1.5.attn.attn.out_proj.weight, backbone.layers.2.1.5.attn.attn.out_proj.bias, backbone.layers.2.1.5.attn.sr.weight, backbone.layers.2.1.5.attn.sr.bias, backbone.layers.2.1.5.attn.norm.weight, backbone.layers.2.1.5.attn.norm.bias, backbone.layers.2.1.5.norm2.weight, backbone.layers.2.1.5.norm2.bias, backbone.layers.2.1.5.ffn.layers.0.weight, backbone.layers.2.1.5.ffn.layers.0.bias, backbone.layers.2.1.5.ffn.layers.1.weight, backbone.layers.2.1.5.ffn.layers.1.bias, backbone.layers.2.1.5.ffn.layers.4.weight, backbone.layers.2.1.5.ffn.layers.4.bias, backbone.layers.2.2.weight, backbone.layers.2.2.bias, backbone.layers.3.0.projection.weight, backbone.layers.3.0.projection.bias, backbone.layers.3.0.norm.weight, backbone.layers.3.0.norm.bias, backbone.layers.3.1.0.norm1.weight, backbone.layers.3.1.0.norm1.bias, backbone.layers.3.1.0.attn.attn.in_proj_weight, backbone.layers.3.1.0.attn.attn.in_proj_bias, backbone.layers.3.1.0.attn.attn.out_proj.weight, backbone.layers.3.1.0.attn.attn.out_proj.bias, backbone.layers.3.1.0.norm2.weight, backbone.layers.3.1.0.norm2.bias, backbone.layers.3.1.0.ffn.layers.0.weight, backbone.layers.3.1.0.ffn.layers.0.bias, backbone.layers.3.1.0.ffn.layers.1.weight, backbone.layers.3.1.0.ffn.layers.1.bias, backbone.layers.3.1.0.ffn.layers.4.weight, backbone.layers.3.1.0.ffn.layers.4.bias, backbone.layers.3.1.1.norm1.weight, backbone.layers.3.1.1.norm1.bias, backbone.layers.3.1.1.attn.attn.in_proj_weight, backbone.layers.3.1.1.attn.attn.in_proj_bias, backbone.layers.3.1.1.attn.attn.out_proj.weight, backbone.layers.3.1.1.attn.attn.out_proj.bias, backbone.layers.3.1.1.norm2.weight, backbone.layers.3.1.1.norm2.bias, backbone.layers.3.1.1.ffn.layers.0.weight, backbone.layers.3.1.1.ffn.layers.0.bias, backbone.layers.3.1.1.ffn.layers.1.weight, backbone.layers.3.1.1.ffn.layers.1.bias, backbone.layers.3.1.1.ffn.layers.4.weight, backbone.layers.3.1.1.ffn.layers.4.bias, backbone.layers.3.1.2.norm1.weight, backbone.layers.3.1.2.norm1.bias, backbone.layers.3.1.2.attn.attn.in_proj_weight, backbone.layers.3.1.2.attn.attn.in_proj_bias, backbone.layers.3.1.2.attn.attn.out_proj.weight, backbone.layers.3.1.2.attn.attn.out_proj.bias, backbone.layers.3.1.2.norm2.weight, backbone.layers.3.1.2.norm2.bias, backbone.layers.3.1.2.ffn.layers.0.weight, backbone.layers.3.1.2.ffn.layers.0.bias, backbone.layers.3.1.2.ffn.layers.1.weight, backbone.layers.3.1.2.ffn.layers.1.bias, backbone.layers.3.1.2.ffn.layers.4.weight, backbone.layers.3.1.2.ffn.layers.4.bias, backbone.layers.3.2.weight, backbone.layers.3.2.bias

missing keys in source state_dict: log_cumprod_at, log_cumprod_bt, log_at, log_bt, at, bt

Name of parameter - Initialization information

backbone.layers.0.0.projection.weight - torch.Size([64, 3, 7, 7]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.0.projection.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.0.norm.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.0.norm.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.norm1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.norm1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.attn.attn.in_proj_weight - torch.Size([192, 64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.attn.attn.in_proj_bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.attn.attn.out_proj.weight - torch.Size([64, 64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.attn.attn.out_proj.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.attn.sr.weight - torch.Size([64, 64, 8, 8]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.attn.sr.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.attn.norm.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.attn.norm.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.norm2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.norm2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.ffn.layers.0.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.ffn.layers.0.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.ffn.layers.1.weight - torch.Size([256, 1, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.ffn.layers.1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.ffn.layers.4.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.0.ffn.layers.4.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.norm1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.norm1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.attn.attn.in_proj_weight - torch.Size([192, 64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.attn.attn.in_proj_bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.attn.attn.out_proj.weight - torch.Size([64, 64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.attn.attn.out_proj.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.attn.sr.weight - torch.Size([64, 64, 8, 8]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.attn.sr.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.attn.norm.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.attn.norm.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.norm2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.norm2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.ffn.layers.0.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.ffn.layers.0.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.ffn.layers.1.weight - torch.Size([256, 1, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.ffn.layers.1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.ffn.layers.4.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.1.ffn.layers.4.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.norm1.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.norm1.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.attn.attn.in_proj_weight - torch.Size([192, 64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.attn.attn.in_proj_bias - torch.Size([192]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.attn.attn.out_proj.weight - torch.Size([64, 64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.attn.attn.out_proj.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.attn.sr.weight - torch.Size([64, 64, 8, 8]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.attn.sr.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.attn.norm.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.attn.norm.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.norm2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.norm2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.ffn.layers.0.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.ffn.layers.0.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.ffn.layers.1.weight - torch.Size([256, 1, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.ffn.layers.1.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.ffn.layers.4.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.1.2.ffn.layers.4.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.2.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.0.2.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.0.projection.weight - torch.Size([128, 64, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.0.projection.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.0.norm.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.0.norm.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.norm1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.norm1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.attn.attn.in_proj_weight - torch.Size([384, 128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.attn.attn.in_proj_bias - torch.Size([384]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.attn.attn.out_proj.weight - torch.Size([128, 128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.attn.attn.out_proj.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.attn.sr.weight - torch.Size([128, 128, 4, 4]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.attn.sr.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.attn.norm.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.attn.norm.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.norm2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.norm2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.ffn.layers.0.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.ffn.layers.0.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.ffn.layers.1.weight - torch.Size([512, 1, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.ffn.layers.1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.ffn.layers.4.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.0.ffn.layers.4.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.norm1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.norm1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.attn.attn.in_proj_weight - torch.Size([384, 128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.attn.attn.in_proj_bias - torch.Size([384]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.attn.attn.out_proj.weight - torch.Size([128, 128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.attn.attn.out_proj.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.attn.sr.weight - torch.Size([128, 128, 4, 4]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.attn.sr.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.attn.norm.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.attn.norm.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.norm2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.norm2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.ffn.layers.0.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.ffn.layers.0.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.ffn.layers.1.weight - torch.Size([512, 1, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.ffn.layers.1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.ffn.layers.4.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.1.ffn.layers.4.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.norm1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.norm1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.attn.attn.in_proj_weight - torch.Size([384, 128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.attn.attn.in_proj_bias - torch.Size([384]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.attn.attn.out_proj.weight - torch.Size([128, 128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.attn.attn.out_proj.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.attn.sr.weight - torch.Size([128, 128, 4, 4]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.attn.sr.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.attn.norm.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.attn.norm.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.norm2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.norm2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.ffn.layers.0.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.ffn.layers.0.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.ffn.layers.1.weight - torch.Size([512, 1, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.ffn.layers.1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.ffn.layers.4.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.2.ffn.layers.4.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.norm1.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.norm1.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.attn.attn.in_proj_weight - torch.Size([384, 128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.attn.attn.in_proj_bias - torch.Size([384]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.attn.attn.out_proj.weight - torch.Size([128, 128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.attn.attn.out_proj.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.attn.sr.weight - torch.Size([128, 128, 4, 4]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.attn.sr.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.attn.norm.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.attn.norm.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.norm2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.norm2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.ffn.layers.0.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.ffn.layers.0.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.ffn.layers.1.weight - torch.Size([512, 1, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.ffn.layers.1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.ffn.layers.4.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.1.3.ffn.layers.4.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.2.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.1.2.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.0.projection.weight - torch.Size([320, 128, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.0.projection.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.0.norm.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.0.norm.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.norm1.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.norm1.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.attn.attn.in_proj_weight - torch.Size([960, 320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.attn.attn.in_proj_bias - torch.Size([960]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.attn.attn.out_proj.weight - torch.Size([320, 320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.attn.attn.out_proj.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.attn.sr.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.attn.norm.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.attn.norm.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.norm2.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.norm2.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.ffn.layers.0.bias - torch.Size([1280]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.ffn.layers.1.bias - torch.Size([1280]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.0.ffn.layers.4.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.norm1.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.norm1.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.attn.attn.in_proj_weight - torch.Size([960, 320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.attn.attn.in_proj_bias - torch.Size([960]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.attn.attn.out_proj.weight - torch.Size([320, 320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.attn.attn.out_proj.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.attn.sr.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.attn.norm.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.attn.norm.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.norm2.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.norm2.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.ffn.layers.0.bias - torch.Size([1280]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.ffn.layers.1.bias - torch.Size([1280]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.1.ffn.layers.4.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.norm1.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.norm1.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.attn.attn.in_proj_weight - torch.Size([960, 320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.attn.attn.in_proj_bias - torch.Size([960]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.attn.attn.out_proj.weight - torch.Size([320, 320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.attn.attn.out_proj.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.attn.sr.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.attn.norm.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.attn.norm.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.norm2.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.norm2.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.ffn.layers.0.bias - torch.Size([1280]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.ffn.layers.1.bias - torch.Size([1280]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.2.ffn.layers.4.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.norm1.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.norm1.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.attn.attn.in_proj_weight - torch.Size([960, 320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.attn.attn.in_proj_bias - torch.Size([960]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.attn.attn.out_proj.weight - torch.Size([320, 320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.attn.attn.out_proj.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.attn.sr.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.attn.norm.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.attn.norm.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.norm2.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.norm2.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.ffn.layers.0.bias - torch.Size([1280]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.ffn.layers.1.bias - torch.Size([1280]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.3.ffn.layers.4.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.norm1.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.norm1.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.attn.attn.in_proj_weight - torch.Size([960, 320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.attn.attn.in_proj_bias - torch.Size([960]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.attn.attn.out_proj.weight - torch.Size([320, 320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.attn.attn.out_proj.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.attn.sr.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.attn.norm.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.attn.norm.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.norm2.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.norm2.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.ffn.layers.0.bias - torch.Size([1280]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.ffn.layers.1.bias - torch.Size([1280]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.4.ffn.layers.4.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.norm1.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.norm1.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.attn.attn.in_proj_weight - torch.Size([960, 320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.attn.attn.in_proj_bias - torch.Size([960]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.attn.attn.out_proj.weight - torch.Size([320, 320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.attn.attn.out_proj.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.attn.sr.weight - torch.Size([320, 320, 2, 2]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.attn.sr.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.attn.norm.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.attn.norm.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.norm2.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.norm2.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.ffn.layers.0.weight - torch.Size([1280, 320, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.ffn.layers.0.bias - torch.Size([1280]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.ffn.layers.1.weight - torch.Size([1280, 1, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.ffn.layers.1.bias - torch.Size([1280]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.ffn.layers.4.weight - torch.Size([320, 1280, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.1.5.ffn.layers.4.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.2.weight - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.2.2.bias - torch.Size([320]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.0.projection.weight - torch.Size([512, 320, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.0.projection.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.0.norm.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.0.norm.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.0.norm1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.0.norm1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.0.attn.attn.in_proj_weight - torch.Size([1536, 512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.0.attn.attn.in_proj_bias - torch.Size([1536]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.0.attn.attn.out_proj.weight - torch.Size([512, 512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.0.attn.attn.out_proj.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.0.norm2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.0.norm2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.0.ffn.layers.0.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.0.ffn.layers.0.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.0.ffn.layers.1.weight - torch.Size([2048, 1, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.0.ffn.layers.1.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.0.ffn.layers.4.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.0.ffn.layers.4.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.1.norm1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.1.norm1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.1.attn.attn.in_proj_weight - torch.Size([1536, 512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.1.attn.attn.in_proj_bias - torch.Size([1536]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.1.attn.attn.out_proj.weight - torch.Size([512, 512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.1.attn.attn.out_proj.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.1.norm2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.1.norm2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.1.ffn.layers.0.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.1.ffn.layers.0.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.1.ffn.layers.1.weight - torch.Size([2048, 1, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.1.ffn.layers.1.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.1.ffn.layers.4.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.1.ffn.layers.4.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.2.norm1.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.2.norm1.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.2.attn.attn.in_proj_weight - torch.Size([1536, 512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.2.attn.attn.in_proj_bias - torch.Size([1536]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.2.attn.attn.out_proj.weight - torch.Size([512, 512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.2.attn.attn.out_proj.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.2.norm2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.2.norm2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.2.ffn.layers.0.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.2.ffn.layers.0.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.2.ffn.layers.1.weight - torch.Size([2048, 1, 3, 3]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.2.ffn.layers.1.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.2.ffn.layers.4.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.1.2.ffn.layers.4.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.2.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

backbone.layers.3.2.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in MixVisionTransformerCustomInitWeights  

decode_head.convs.0.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.convs.0.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.convs.0.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.convs.1.conv.weight - torch.Size([256, 128, 1, 1]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.convs.1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.convs.1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.convs.2.conv.weight - torch.Size([256, 320, 1, 1]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.convs.2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.convs.2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.convs.3.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.convs.3.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.convs.3.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.fusion_conv.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.fusion_conv.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.fusion_conv.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.unet.init_conv.weight - torch.Size([256, 272, 7, 7]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.init_conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.time_mlp.1.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.time_mlp.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.time_mlp.3.weight - torch.Size([1024, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.time_mlp.3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.0.mlp.1.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.0.mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.0.block1.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.0.block1.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.0.block1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.0.block1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.0.block2.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.0.block2.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.0.block2.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.0.block2.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.1.mlp.1.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.1.mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.1.block1.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.1.block1.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.1.block1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.1.block1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.1.block2.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.1.block2.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.1.block2.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.1.block2.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.2.fn.fn.to_qkv.weight - torch.Size([384, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.2.fn.fn.to_out.0.weight - torch.Size([256, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.2.fn.fn.to_out.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.2.fn.fn.to_out.1.g - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.2.fn.norm.g - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.3.weight - torch.Size([256, 256, 4, 4]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.0.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.0.mlp.1.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.0.mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.0.block1.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.0.block1.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.0.block1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.0.block1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.0.block2.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.0.block2.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.0.block2.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.0.block2.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.1.mlp.1.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.1.mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.1.block1.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.1.block1.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.1.block1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.1.block1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.1.block2.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.1.block2.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.1.block2.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.1.block2.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.2.fn.fn.to_qkv.weight - torch.Size([384, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.2.fn.fn.to_out.0.weight - torch.Size([256, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.2.fn.fn.to_out.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.2.fn.fn.to_out.1.g - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.2.fn.norm.g - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.3.weight - torch.Size([256, 256, 4, 4]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.1.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.0.mlp.1.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.0.mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.0.block1.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.0.block1.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.0.block1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.0.block1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.0.block2.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.0.block2.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.0.block2.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.0.block2.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.1.mlp.1.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.1.mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.1.block1.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.1.block1.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.1.block1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.1.block1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.1.block2.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.1.block2.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.1.block2.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.1.block2.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.2.fn.fn.to_qkv.weight - torch.Size([384, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.2.fn.fn.to_out.0.weight - torch.Size([256, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.2.fn.fn.to_out.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.2.fn.fn.to_out.1.g - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.2.fn.norm.g - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.downs.2.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.0.mlp.1.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.0.mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.0.block1.proj.weight - torch.Size([256, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.0.block1.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.0.block1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.0.block1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.0.block2.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.0.block2.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.0.block2.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.0.block2.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.0.res_conv.weight - torch.Size([256, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.0.res_conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.1.mlp.1.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.1.mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.1.block1.proj.weight - torch.Size([256, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.1.block1.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.1.block1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.1.block1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.1.block2.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.1.block2.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.1.block2.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.1.block2.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.1.res_conv.weight - torch.Size([256, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.1.res_conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.2.fn.fn.to_qkv.weight - torch.Size([384, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.2.fn.fn.to_out.0.weight - torch.Size([256, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.2.fn.fn.to_out.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.2.fn.fn.to_out.1.g - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.2.fn.norm.g - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.3.1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.0.3.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.0.mlp.1.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.0.mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.0.block1.proj.weight - torch.Size([256, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.0.block1.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.0.block1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.0.block1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.0.block2.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.0.block2.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.0.block2.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.0.block2.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.0.res_conv.weight - torch.Size([256, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.0.res_conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.1.mlp.1.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.1.mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.1.block1.proj.weight - torch.Size([256, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.1.block1.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.1.block1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.1.block1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.1.block2.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.1.block2.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.1.block2.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.1.block2.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.1.res_conv.weight - torch.Size([256, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.1.res_conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.2.fn.fn.to_qkv.weight - torch.Size([384, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.2.fn.fn.to_out.0.weight - torch.Size([256, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.2.fn.fn.to_out.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.2.fn.fn.to_out.1.g - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.2.fn.norm.g - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.3.1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.1.3.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.0.mlp.1.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.0.mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.0.block1.proj.weight - torch.Size([256, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.0.block1.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.0.block1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.0.block1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.0.block2.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.0.block2.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.0.block2.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.0.block2.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.0.res_conv.weight - torch.Size([256, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.0.res_conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.1.mlp.1.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.1.mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.1.block1.proj.weight - torch.Size([256, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.1.block1.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.1.block1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.1.block1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.1.block2.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.1.block2.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.1.block2.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.1.block2.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.1.res_conv.weight - torch.Size([256, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.1.res_conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.2.fn.fn.to_qkv.weight - torch.Size([384, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.2.fn.fn.to_out.0.weight - torch.Size([256, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.2.fn.fn.to_out.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.2.fn.fn.to_out.1.g - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.2.fn.norm.g - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.ups.2.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block1.mlp.1.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block1.mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block1.block1.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block1.block1.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block1.block1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block1.block1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block1.block2.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block1.block2.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block1.block2.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block1.block2.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_attn.fn.fn.to_qkv.weight - torch.Size([384, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_attn.fn.fn.to_out.weight - torch.Size([256, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_attn.fn.fn.to_out.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_attn.fn.norm.g - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block2.mlp.1.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block2.mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block2.block1.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block2.block1.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block2.block1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block2.block1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block2.block2.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block2.block2.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block2.block2.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.mid_block2.block2.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.final_res_block.mlp.1.weight - torch.Size([512, 1024]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.final_res_block.mlp.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.final_res_block.block1.proj.weight - torch.Size([256, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.final_res_block.block1.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.final_res_block.block1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.final_res_block.block1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.final_res_block.block2.proj.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.final_res_block.block2.proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.final_res_block.block2.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.final_res_block.block2.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.final_res_block.res_conv.weight - torch.Size([256, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.final_res_block.res_conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.final_conv.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoderDiffusion  

decode_head.unet.final_conv.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.conv_seg_new.weight - torch.Size([20, 256, 1, 1]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.conv_seg_new.bias - torch.Size([20]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  

decode_head.embed.weight - torch.Size([20, 16]): 
Initialized by user-defined `init_weights` in SegformerHeadUnetFCHeadMultiStep  
2023-08-08 17:18:48,535 - mmseg - INFO - EncoderDecoderDiffusion(
  (backbone): MixVisionTransformerCustomInitWeights(
    (layers): ModuleList(
      (0): ModuleList(
        (0): PatchEmbed(
          (projection): Conv2d(3, 64, kernel_size=(7, 7), stride=(4, 4), padding=(3, 3))
          (norm): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
        )
        (1): ModuleList(
          (0): TransformerEncoderLayer(
            (norm1): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(64, 64, kernel_size=(8, 8), stride=(8, 8))
              (norm): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (1): TransformerEncoderLayer(
            (norm1): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(64, 64, kernel_size=(8, 8), stride=(8, 8))
              (norm): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (2): TransformerEncoderLayer(
            (norm1): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=64, out_features=64, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(64, 64, kernel_size=(8, 8), stride=(8, 8))
              (norm): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
        )
        (2): LayerNorm((64,), eps=1e-06, elementwise_affine=True)
      )
      (1): ModuleList(
        (0): PatchEmbed(
          (projection): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (norm): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
        )
        (1): ModuleList(
          (0): TransformerEncoderLayer(
            (norm1): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(128, 128, kernel_size=(4, 4), stride=(4, 4))
              (norm): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (1): TransformerEncoderLayer(
            (norm1): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(128, 128, kernel_size=(4, 4), stride=(4, 4))
              (norm): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (2): TransformerEncoderLayer(
            (norm1): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(128, 128, kernel_size=(4, 4), stride=(4, 4))
              (norm): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (3): TransformerEncoderLayer(
            (norm1): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=128, out_features=128, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(128, 128, kernel_size=(4, 4), stride=(4, 4))
              (norm): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
        )
        (2): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
      )
      (2): ModuleList(
        (0): PatchEmbed(
          (projection): Conv2d(128, 320, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
        )
        (1): ModuleList(
          (0): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (1): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (2): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (3): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (4): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (5): TransformerEncoderLayer(
            (norm1): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=320, out_features=320, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
              (sr): Conv2d(320, 320, kernel_size=(2, 2), stride=(2, 2))
              (norm): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            )
            (norm2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(1280, 1280, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1280)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
        )
        (2): LayerNorm((320,), eps=1e-06, elementwise_affine=True)
      )
      (3): ModuleList(
        (0): PatchEmbed(
          (projection): Conv2d(320, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
          (norm): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
        )
        (1): ModuleList(
          (0): TransformerEncoderLayer(
            (norm1): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
            )
            (norm2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2048)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (1): TransformerEncoderLayer(
            (norm1): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
            )
            (norm2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2048)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
          (2): TransformerEncoderLayer(
            (norm1): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
            (attn): EfficientMultiheadAttention(
              (attn): MultiheadAttention(
                (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
              )
              (proj_drop): Dropout(p=0.0, inplace=False)
              (dropout_layer): DropPath()
            )
            (norm2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
            (ffn): MixFFN(
              (activate): GELU()
              (layers): Sequential(
                (0): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1))
                (1): Conv2d(2048, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=2048)
                (2): GELU()
                (3): Dropout(p=0.0, inplace=False)
                (4): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1))
                (5): Dropout(p=0.0, inplace=False)
              )
              (dropout_layer): DropPath()
            )
          )
        )
        (2): LayerNorm((512,), eps=1e-06, elementwise_affine=True)
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': '/home/sidd_s/scratch/saved_models/DDPS/segformer_b2_cityscapes20_singlestep/best_mIoU_iter_64000.pth'}
  (decode_head): SegformerHeadUnetFCHeadMultiStep(
    input_transform=multiple_select, ignore_index=0, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): None
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (1): ConvModule(
        (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (2): ConvModule(
        (conv): Conv2d(320, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (3): ConvModule(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
    (fusion_conv): ConvModule(
      (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
    (unet): Unet(
      (init_conv): Conv2d(272, 256, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))
      (time_mlp): Sequential(
        (0): SinusoidalPosEmb()
        (1): Linear(in_features=256, out_features=1024, bias=True)
        (2): GELU()
        (3): Linear(in_features=1024, out_features=1024, bias=True)
      )
      (downs): ModuleList(
        (0): ModuleList(
          (0): ResnetBlock(
            (mlp): Sequential(
              (0): SiLU()
              (1): Linear(in_features=1024, out_features=512, bias=True)
            )
            (block1): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (block2): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (res_conv): Identity()
          )
          (1): ResnetBlock(
            (mlp): Sequential(
              (0): SiLU()
              (1): Linear(in_features=1024, out_features=512, bias=True)
            )
            (block1): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (block2): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (res_conv): Identity()
          )
          (2): Residual(
            (fn): PreNorm(
              (fn): LinearAttention(
                (to_qkv): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (to_out): Sequential(
                  (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
                  (1): LayerNorm()
                )
              )
              (norm): LayerNorm()
            )
          )
          (3): Conv2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
        )
        (1): ModuleList(
          (0): ResnetBlock(
            (mlp): Sequential(
              (0): SiLU()
              (1): Linear(in_features=1024, out_features=512, bias=True)
            )
            (block1): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (block2): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (res_conv): Identity()
          )
          (1): ResnetBlock(
            (mlp): Sequential(
              (0): SiLU()
              (1): Linear(in_features=1024, out_features=512, bias=True)
            )
            (block1): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (block2): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (res_conv): Identity()
          )
          (2): Residual(
            (fn): PreNorm(
              (fn): LinearAttention(
                (to_qkv): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (to_out): Sequential(
                  (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
                  (1): LayerNorm()
                )
              )
              (norm): LayerNorm()
            )
          )
          (3): Conv2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
        )
        (2): ModuleList(
          (0): ResnetBlock(
            (mlp): Sequential(
              (0): SiLU()
              (1): Linear(in_features=1024, out_features=512, bias=True)
            )
            (block1): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (block2): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (res_conv): Identity()
          )
          (1): ResnetBlock(
            (mlp): Sequential(
              (0): SiLU()
              (1): Linear(in_features=1024, out_features=512, bias=True)
            )
            (block1): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (block2): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (res_conv): Identity()
          )
          (2): Residual(
            (fn): PreNorm(
              (fn): LinearAttention(
                (to_qkv): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (to_out): Sequential(
                  (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
                  (1): LayerNorm()
                )
              )
              (norm): LayerNorm()
            )
          )
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (ups): ModuleList(
        (0): ModuleList(
          (0): ResnetBlock(
            (mlp): Sequential(
              (0): SiLU()
              (1): Linear(in_features=1024, out_features=512, bias=True)
            )
            (block1): Block(
              (proj): WeightStandardizedConv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (block2): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): ResnetBlock(
            (mlp): Sequential(
              (0): SiLU()
              (1): Linear(in_features=1024, out_features=512, bias=True)
            )
            (block1): Block(
              (proj): WeightStandardizedConv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (block2): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): Residual(
            (fn): PreNorm(
              (fn): LinearAttention(
                (to_qkv): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (to_out): Sequential(
                  (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
                  (1): LayerNorm()
                )
              )
              (norm): LayerNorm()
            )
          )
          (3): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (1): ModuleList(
          (0): ResnetBlock(
            (mlp): Sequential(
              (0): SiLU()
              (1): Linear(in_features=1024, out_features=512, bias=True)
            )
            (block1): Block(
              (proj): WeightStandardizedConv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (block2): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): ResnetBlock(
            (mlp): Sequential(
              (0): SiLU()
              (1): Linear(in_features=1024, out_features=512, bias=True)
            )
            (block1): Block(
              (proj): WeightStandardizedConv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (block2): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): Residual(
            (fn): PreNorm(
              (fn): LinearAttention(
                (to_qkv): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (to_out): Sequential(
                  (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
                  (1): LayerNorm()
                )
              )
              (norm): LayerNorm()
            )
          )
          (3): Sequential(
            (0): Upsample(scale_factor=2.0, mode=nearest)
            (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        (2): ModuleList(
          (0): ResnetBlock(
            (mlp): Sequential(
              (0): SiLU()
              (1): Linear(in_features=1024, out_features=512, bias=True)
            )
            (block1): Block(
              (proj): WeightStandardizedConv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (block2): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (1): ResnetBlock(
            (mlp): Sequential(
              (0): SiLU()
              (1): Linear(in_features=1024, out_features=512, bias=True)
            )
            (block1): Block(
              (proj): WeightStandardizedConv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (block2): Block(
              (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
              (act): SiLU()
            )
            (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (2): Residual(
            (fn): PreNorm(
              (fn): LinearAttention(
                (to_qkv): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
                (to_out): Sequential(
                  (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
                  (1): LayerNorm()
                )
              )
              (norm): LayerNorm()
            )
          )
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (mid_block1): ResnetBlock(
        (mlp): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=512, bias=True)
        )
        (block1): Block(
          (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
          (act): SiLU()
        )
        (block2): Block(
          (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
          (act): SiLU()
        )
        (res_conv): Identity()
      )
      (mid_attn): Residual(
        (fn): PreNorm(
          (fn): Attention(
            (to_qkv): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (to_out): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
          )
          (norm): LayerNorm()
        )
      )
      (mid_block2): ResnetBlock(
        (mlp): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=512, bias=True)
        )
        (block1): Block(
          (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
          (act): SiLU()
        )
        (block2): Block(
          (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
          (act): SiLU()
        )
        (res_conv): Identity()
      )
      (final_res_block): ResnetBlock(
        (mlp): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=512, bias=True)
        )
        (block1): Block(
          (proj): WeightStandardizedConv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
          (act): SiLU()
        )
        (block2): Block(
          (proj): WeightStandardizedConv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (norm): GroupNorm(8, 256, eps=1e-05, affine=True)
          (act): SiLU()
        )
        (res_conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (final_conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv_seg_new): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
    (embed): Embedding(20, 16)
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': '/home/sidd_s/scratch/saved_models/DDPS/segformer_b2_cityscapes20_singlestep/best_mIoU_iter_64000.pth'}
)
2023-08-08 17:18:48,579 - mmseg - INFO - Loaded 2975 images
2023-08-08 17:18:49,536 - mmseg - INFO - Loaded 500 images
